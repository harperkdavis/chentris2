{"mappings":"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","sources":["client.ts"],"sourcesContent":["const PIECES = [\r\n    {\r\n        layout: [ // I-piece 0\r\n            [0, 0, 0, 0],\r\n            [1, 1, 1, 1],\r\n            [0, 0, 0, 0],\r\n            [0, 0, 0, 0]\r\n        ], \r\n        color: [130, 250, 230]\r\n    },\r\n    {\r\n        layout: [ // J-piece 1\r\n            [1, 0, 0],\r\n            [1, 1, 1],\r\n            [0, 0, 0]\r\n        ], color: [130, 150, 250]\r\n    },\r\n    {\r\n        layout: [ // L-piece 2\r\n            [0, 0, 1],\r\n            [1, 1, 1],\r\n            [0, 0, 0]\r\n        ], \r\n        color: [240, 160, 110]\r\n    },\r\n    {\r\n        layout: [ // O-piece 3\r\n            [1, 1],\r\n            [1, 1]\r\n        ], \r\n        color: [240, 230, 110]\r\n    },\r\n    {\r\n        layout: [ // T-piece 4\r\n            [0, 1, 0],\r\n            [1, 1, 1],\r\n            [0, 0, 0]\r\n        ], \r\n        color: [180, 130, 240]\r\n    },\r\n    {\r\n        layout: [ // Z-piece 5\r\n            [1, 1, 0],\r\n            [0, 1, 1],\r\n            [0, 0, 0]\r\n        ], \r\n        color: [240, 130, 150]\r\n    },\r\n    {\r\n        layout: [ // S-piece 6\r\n            [0, 1, 1],\r\n            [1, 1, 0],\r\n            [0, 0, 0]\r\n        ], \r\n        color: [130, 240, 120]\r\n    },\r\n    {\r\n        layout: [ // Garbage 7 (Not intended to be used)\r\n            [1]\r\n        ],\r\n        color: [200, 200, 200],\r\n    }\r\n];\r\n\r\nconst COMBOS = {\r\n    '00': { name: 'none', lines: { type: 'add', count: 0 }, juice: { type: 'add', count: 0 }},\r\n    // 1 - order\r\n\r\n    '1l': { name: 'single', lines: { type: 'add', count: 1 }, juice: { type: 'add', count: 100 } },\r\n    '2l': { name: 'double', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 } },\r\n    '3l': { name: 'triple', lines: { type: 'add', count: 3 }, juice: { type: 'add', count: 900 } },\r\n    '4l': { name: 'chentris', lines: { type: 'add', count: 4 }, juice: { type: 'add', count: 1600 } },\r\n    '1t': { name: 't-spin single', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 } },\r\n    '2t': { name: 't-spin double', lines: { type: 'add', count: 4 }, juice: { type: 'add', count: 1000 } },\r\n    '3t': { name: 't-spin triple', lines: { type: 'add', count: 6 }, juice: { type: 'add', count: 3200 } },\r\n    'fc': { name: 'full clear', lines: { type: 'add', count: 4 }, juice: { type: 'multiply', count: 2 } },\r\n\r\n    // 2 - order\r\n\r\n    '1l1l': { name: 'snake eyes', lines: { type: 'add', count: 1 }, juice: { type: 'add', count: 100 + 100 } },\r\n    '1l2l': { name: 'the old one two', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 100 } },\r\n    '1l3l': { name: 'the old one three', lines: { type: 'add', count: 3 }, juice: { type: 'add', count: 900 + 100 } },\r\n    '1l4l': { name: 'big five', lines: { type: 'add', count: 4 }, juice: { type: 'add', count: 1600 + 200 } },\r\n    '1l1t': { name: 'snake spins', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 100 } },\r\n    '1l2t': { name: 'the old one two spin', lines: { type: 'add', count: 4 }, juice: { type: 'add', count: 1000 + 100 } },\r\n    '1l3t': { name: 'the old one three spin', lines: { type: 'add', count: 6 }, juice: { type: 'add', count: 3200 + 200 } },\r\n    '1lfc': { name: 'one line full clear', lines: { type: 'add', count: 4 }, juice: { type: 'multiply', count: 2 } },\r\n\r\n    '2l1l': { name: 'stepdown', lines: { type: 'add', count: 1 }, juice: { type: 'add', count: 100 + 200 } },\r\n    '2l2l': { name: 'halftris', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 200 } },\r\n    '2l3l': { name: 'up a notch', lines: { type: 'add', count: 3 }, juice: { type: 'add', count: 900 + 200 } },\r\n    '2l4l': { name: 'big six', lines: { type: 'add', count: 4 }, juice: { type: 'add', count: 1600 + 400 } },\r\n    '2l1t': { name: 'spindown', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 200 } },\r\n    '2l2t': { name: 'spindle', lines: { type: 'add', count: 4 }, juice: { type: 'add', count: 1000 + 200 } },\r\n    '2l3t': { name: 'up a spin', lines: { type: 'add', count: 6 }, juice: { type: 'add', count: 3200 + 400 } },\r\n    '2lfc': { name: 'double trouble', lines: { type: 'add', count: 4 + 1 }, juice: { type: 'multiply', count: 2 } },\r\n\r\n    '3l1l': { name: 'downtris', lines: { type: 'add', count: 1 }, juice: { type: 'add', count: 100 + 400 } },\r\n    '3l2l': { name: 'leapdown', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 400 } },\r\n    '3l3l': { name: 'trippy', lines: { type: 'add', count: 3 }, juice: { type: 'add', count: 900 + 400 } },\r\n    '3l4l': { name: 'lucky guy', lines: { type: 'add', count: 4 + 1 }, juice: { type: 'add', count: 1600 + 800 } },\r\n    '3l1t': { name: 'spinleap', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 400 } },\r\n    '3l2t': { name: 'trippy spin', lines: { type: 'add', count: 4 }, juice: { type: 'add', count: 1000 + 400 } },\r\n    '3l3t': { name: 'linespin equality', lines: { type: 'add', count: 6 + 1 }, juice: { type: 'add', count: 3200 + 800 } },\r\n    '3lfc': { name: 'trippy clear', lines: { type: 'add', count: 4 + 2 }, juice: { type: 'multiply', count: 2 } },\r\n\r\n    '4l1l': { name: 'small five', lines: { type: 'add', count: 1 }, juice: { type: 'add', count: 100 + 800 } },\r\n    '4l2l': { name: 'small six', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 800 } },\r\n    '4l3l': { name: 'guy lucky', lines: { type: 'add', count: 3 + 1 }, juice: { type: 'add', count: 900 + 800 } },\r\n    '4l4l': { name: 'b2b', lines: { type: 'add', count: 4 + 2 }, juice: { type: 'add', count: 1600 + 1600 } },\r\n    '4l1t': { name: 'chenspin', lines: { type: 'add', count: 2 + 1 }, juice: { type: 'add', count: 400 + 800 } },\r\n    '4l2t': { name: 'halfdown', lines: { type: 'add', count: 4 + 1 }, juice: { type: 'add', count: 1000 + 800 } },\r\n    '4l3t': { name: 'spinlucky', lines: { type: 'add', count: 6 + 2 }, juice: { type: 'add', count: 3200 + 1600 } },\r\n    '4lfc': { name: 'perfect clear', lines: { type: 'add', count: 4 + 4 }, juice: { type: 'multiply', count: 2 } },\r\n\r\n    '1t1l': { name: 'singulari-t', lines: { type: 'add', count: 1 }, juice: { type: 'add', count: 100 + 200 } },\r\n    '1t2l': { name: 'reverse spindle', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 200 } },\r\n    '1t3l': { name: 'trip from t', lines: { type: 'add', count: 3 }, juice: { type: 'add', count: 900 + 200 } },\r\n    '1t4l': { name: 'post-t chentris', lines: { type: 'add', count: 4 + 1 }, juice: { type: 'add', count: 1600 + 400 } },\r\n    '1t1t': { name: 'double it', lines: { type: 'add', count: 2 + 1 }, juice: { type: 'add', count: 400 + 200 } },\r\n    '1t2t': { name: 'red-t blue-t', lines: { type: 'add', count: 4 + 1 }, juice: { type: 'add', count: 1000 + 200 } },\r\n    '1t3t': { name: 'chen-t', lines: { type: 'add', count: 6 + 1 }, juice: { type: 'add', count: 3200 + 400 } },\r\n    '1tfc': { name: 't-clear', lines: { type: 'add', count: 4 + 2 }, juice: { type: 'multiply', count: 2 } },\r\n\r\n    '2t1l': { name: 'keep it on the t-l', lines: { type: 'add', count: 1 }, juice: { type: 'add', count: 100 + 400 } },\r\n    '2t2l': { name: '2 spin 2 line', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 400 } },\r\n    '2t3l': { name: 'spinny trip', lines: { type: 'add', count: 3 }, juice: { type: 'add', count: 900 + 400 } },\r\n    '2t4l': { name: '2 spin 4 me', lines: { type: 'add', count: 4 + 1 }, juice: { type: 'add', count: 1600 + 800 } },\r\n    '2t1t': { name: 'stepdown-t', lines: { type: 'add', count: 2 + 1 }, juice: { type: 'add', count: 400 + 400 } },\r\n    '2t2t': { name: 'adds to 40', lines: { type: 'add', count: 4 + 1 }, juice: { type: 'add', count: 1000 + 400 } },\r\n    '2t3t': { name: 'nathan special', lines: { type: 'add', count: 6 + 1 }, juice: { type: 'add', count: 3200 + 800 } },\r\n    '2tfc': { name: 'double t-clear', lines: { type: 'add', count: 4 + 2 }, juice: { type: 'multiply', count: 2 } },\r\n\r\n    '3t1l': { name: 'leapspin', lines: { type: 'add', count: 1 }, juice: { type: 'add', count: 100 + 200 } },\r\n    '3t2l': { name: 'stepspin', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 200 } },\r\n    '3t3l': { name: 'trippy spinline', lines: { type: 'add', count: 3 }, juice: { type: 'add', count: 900 + 200 } },\r\n    '3t4l': { name: 'luckyspin', lines: { type: 'add', count: 4 + 2 }, juice: { type: 'add', count: 1600 + 400 } },\r\n    '3t1t': { name: 't-chen', lines: { type: 'add', count: 2 + 2 }, juice: { type: 'add', count: 400 + 200 } },\r\n    '3t2t': { name: 'reverse nathan special', lines: { type: 'add', count: 4 + 2 }, juice: { type: 'add', count: 1000 + 200 } },\r\n    '3t3t': { name: 'trip trip goose', lines: { type: 'add', count: 6 + 2 }, juice: { type: 'add', count: 3200 + 400 } },\r\n    '3tfc': { name: 'nasty triple t-clear', lines: { type: 'add', count: 4 + 4 }, juice: { type: 'multiply', count: 2 } },\r\n\r\n    // 3 - order\r\n\r\n    // 1 line\r\n\r\n    '1l1l1l': { name: 'three eyed snake', lines: { type: 'add', count: 1 }, juice: { type: 'add', count: 100 + 400 } },\r\n    '1l1l2l': { name: 'fibonacci-3', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 400 } },\r\n    '1l1l3l': { name: '1 + 1 = 3', lines: { type: 'add', count: 3 }, juice: { type: 'add', count: 900 + 400 } },\r\n    '1l1l4l': { name: 'eeh ?!', lines: { type: 'add', count: 4 + 1 }, juice: { type: 'add', count: 1600 + 800 } },\r\n\r\n    '1l1l1l1l': { name: 'still single?', lines: { type: 'add', count: 1 + 1 }, juice: { type: 'add', count: 100 + 800 } },\r\n    '1l1l1l1l1l': { name: 'leave the house', lines: { type: 'add', count: 1 + 2 }, juice: { type: 'add', count: 100 + 1600 } },\r\n    '1l1l2l3l': { name: 'fibonacci-4', lines: { type: 'add', count: 3 + 2 }, juice: { type: 'add', count: 900 + 1600 } },\r\n\r\n    '1l2l1l': { name: 'up then down', lines: { type: 'add', count: 1 }, juice: { type: 'add', count: 100 + 400 } },\r\n    '1l2l2l': { name: 'bad at counting', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 400 } },\r\n    '1l2l3l': { name: 'counting up', lines: { type: 'add', count: 3 }, juice: { type: 'add', count: 900 + 400 } },\r\n    '1l2l4l': { name: 'powers of two', lines: { type: 'add', count: 4 + 1 }, juice: { type: 'add', count: 1600 + 800 } },\r\n\r\n    '1l2l3l4l': { name: 'counting higher', lines: { type: 'add', count: 4 + 2 }, juice: { type: 'add', count: 1600 + 1600 } },\r\n\r\n    '1l3l1l': { name: 'small spark', lines: { type: 'add', count: 1 }, juice: { type: 'add', count: 100 + 400 } },\r\n    '1l3l2l': { name: 'really bad at counting', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 400 } },\r\n    '1l3l3l': { name: 'two triple post single', lines: { type: 'add', count: 3 }, juice: { type: 'add', count: 900 + 400 } },\r\n    '1l3l4l': { name: 'building chentris', lines: { type: 'add', count: 4 + 1 }, juice: { type: 'add', count: 1600 + 800 } },\r\n\r\n    '1l4l1l': { name: 'big spark', lines: { type: 'add', count: 1 }, juice: { type: 'add', count: 100 + 800 } },\r\n    '1l4l2l': { name: 'single meaning', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 800 } },\r\n    '1l4l3l': { name: 'composite', lines: { type: 'add', count: 3 + 1 }, juice: { type: 'add', count: 900 + 800 } },\r\n    '1l4l4l': { name: 'single into b2b', lines: { type: 'add', count: 4 + 2 }, juice: { type: 'add', count: 1600 + 1600 } },\r\n\r\n    // 2 lines\r\n};\r\n\r\nconst T_CHECK = [\r\n    [1, 0, 1],\r\n    [0, 0, 0],\r\n    [1, 0, 1]\r\n];\r\n\r\nconst WALL_KICK = {\r\n    0: {\r\n        3: [\r\n            [0, 0],\r\n            [1, 0],\r\n            [1, 1],\r\n            [0, -2],\r\n            [1, -2],\r\n        ],\r\n        1: [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [-1, 1],\r\n            [0, -2],\r\n            [-1, -2],\r\n        ],\r\n        2: [\r\n            [0, 0],\r\n            [1, 0],\r\n            [2, 0],\r\n            [1, 1],\r\n            [2, 1],\r\n            [-1, 0],\r\n            [-2, 0],\r\n            [-1, 1],\r\n            [-2, 1],\r\n            [0, -1],\r\n            [3, 0],\r\n            [-3, 0]\r\n        ]\r\n    },\r\n    1: {\r\n        0: [\r\n            [0, 0],\r\n            [1, 0],\r\n            [1, -1],\r\n            [0, 2],\r\n            [1, 2],\r\n        ],\r\n        2: [\r\n            [0, 0],\r\n            [1, 0],\r\n            [1, -1],\r\n            [0, 2],\r\n            [1, 2],\r\n        ],\r\n        3: [\r\n            [0, 0],\r\n            [0, 1],\r\n            [0, 2],\r\n            [-1, 1],\r\n            [-1, 2],\r\n            [0, -1],\r\n            [0, -2],\r\n            [-1, -1],\r\n            [-1, -2],\r\n            [1, 0],\r\n            [0, 3],\r\n            [0, -3]\r\n        ]\r\n    },\r\n    2: {\r\n        1: [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [-1, 1],\r\n            [0, -2],\r\n            [-1, -2],\r\n        ],\r\n        3: [\r\n            [0, 0],\r\n            [1, 0],\r\n            [1, 1],\r\n            [0, -2],\r\n            [1, -2],\r\n        ],\r\n        0: [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [-2, 0],\r\n            [-1, -1],\r\n            [-2,-1],\r\n            [1, 0],\r\n            [2, 0],\r\n            [1, -1],\r\n            [2, -1],\r\n            [0, 1],\r\n            [-3, 0],\r\n            [3, 0]\r\n        ]\r\n    },\r\n    3: {\r\n        2: [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [-1, -1],\r\n            [0, 2],\r\n            [-1, 2],\r\n        ],\r\n        0: [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [-1, -1],\r\n            [0, 2],\r\n            [-1, 2],\r\n        ],\r\n        1: [\r\n            [0, 0],\r\n            [0, 1],\r\n            [0, 2],\r\n            [1, 1],\r\n            [1, 2],\r\n            [0, -1],\r\n            [0, -2],\r\n            [1, -1],\r\n            [1, -2],\r\n            [-1, 0],\r\n            [0, 3],\r\n            [0, -3]\r\n        ]\r\n    }\r\n}\r\n  \r\nconst WALL_KICK_I = {\r\n    0: {\r\n        3: [\r\n            [0, 0],\r\n            [2, 0],\r\n            [-1, 0],\r\n            [-1, 2],\r\n            [2, -1],\r\n        ],\r\n        1: [\r\n            [0, 0],\r\n            [-2, 0],\r\n            [1, 0],\r\n            [1, 2],\r\n            [-2, -1],\r\n        ],\r\n        2: [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [-2, 0],\r\n            [1, 0],\r\n            [2, 0],\r\n            [0, 1]\r\n        ]\r\n    },\r\n    1: {\r\n        0: [\r\n            [0, 0],\r\n            [2, 0],\r\n            [-1, 0],\r\n            [2, 1],\r\n            [-1, -2],\r\n        ],\r\n        2: [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [2, 0],\r\n            [-1, 2],\r\n            [2, -1],\r\n        ],\r\n        3: [\r\n            [0, 0],\r\n            [0, 1],\r\n            [0, 2],\r\n            [0, -1],\r\n            [0, -2],\r\n            [-1, 0]\r\n        ]\r\n    },\r\n    2: {\r\n        1: [\r\n            [0, 0],\r\n            [-2, 0],\r\n            [1, 0],\r\n            [-2, 1],\r\n            [1, -1],\r\n        ],\r\n        3: [\r\n            [0, 0],\r\n            [2, 0],\r\n            [-1, 0],\r\n            [2, 1],\r\n            [-1, -1],\r\n        ],\r\n        0: [\r\n            [0, 0],\r\n            [1, 0],\r\n            [2, 0],\r\n            [-1, 0],\r\n            [-2, 0],\r\n            [0, -1]\r\n        ]\r\n    },\r\n    3: {\r\n        2: [\r\n            [0, 0],\r\n            [1, 0],\r\n            [-2, 0],\r\n            [1, 2],\r\n            [-2, -1],\r\n        ],\r\n        0: [\r\n            [0, 0],\r\n            [-2, 0],\r\n            [1, 0],\r\n            [-2, 1],\r\n            [1, -2],\r\n        ],\r\n        1: [\r\n            [0, 0],\r\n            [0, 1],\r\n            [0, 2],\r\n            [0, -1],\r\n            [0, -2],\r\n            [1, 0]\r\n        ]\r\n    }\r\n}\r\n\r\ninterface Board {\r\n    srng: string,\r\n\r\n    tiles: Array<number>,\r\n    bag: Array<Piece>,\r\n\r\n    hold: Piece,\r\n    canHold: boolean,\r\n\r\n    lost: boolean,\r\n\r\n    bagPool: number,\r\n    garbagePool: number,\r\n\r\n    move: number,\r\n\r\n    combo: string,\r\n\r\n    lastDamager: string,\r\n    garbageQueue: Array<any>,\r\n\r\n    clears: number,\r\n\r\n    juice: number,\r\n    lines: number,\r\n\r\n    finishingMoves: number,\r\n};\r\n\r\ninterface Move {\r\n    type: MoveType,\r\n    submoves?: Array<Direction>,\r\n    garbage?: number,\r\n};\r\n\r\ninterface SubmoveState {\r\n    pieceX: number,\r\n    pieceY: number,\r\n    pieceRotation: number,\r\n    submoves: Array<Direction>,\r\n    lastMoveSuccessful: boolean,\r\n    dropLines: number,\r\n}\r\n\r\nenum Piece {\r\n    Empty = -1,\r\n    I = 0,\r\n    J = 1,\r\n    L = 2,\r\n    O = 3,\r\n    T = 4,\r\n    Z = 5,\r\n    S = 6,\r\n    Garbage = 7,\r\n};\r\n\r\nenum MoveType {\r\n    Move = \"move\",\r\n    Hold = \"hold\",\r\n    AddGarbage = \"addGarbage\",\r\n};\r\n\r\nenum Direction {\r\n    Left = \"left\",\r\n    Right = \"right\",\r\n\r\n    Down = \"down\",\r\n    Drop = \"drop\",\r\n\r\n    RotateRight = \"rotateRight\",\r\n    RotateLeft = \"rotateLeft\",\r\n    Rotate180 = \"rotate180\",\r\n};\r\n\r\ninterface Rules {\r\n    competitive: boolean,\r\n    initialSpeed: number,\r\n    resendGarbage: boolean,\r\n    forgivingCombos: boolean,\r\n    garbageTurns: number,\r\n    garbageDefense: boolean,\r\n}\r\n\r\nconst COMPETITIVE_DEFAULTS: Rules = {\r\n    competitive: true,\r\n    initialSpeed: 80,\r\n    resendGarbage: true,\r\n    forgivingCombos: false,\r\n    garbageTurns: 1,\r\n    garbageDefense: false,\r\n};\r\n\r\nconst NORMAL_DEFAULTS: Rules = {\r\n    competitive: false,\r\n    initialSpeed: 80,\r\n    resendGarbage: true,\r\n    forgivingCombos: true,\r\n    garbageTurns: 2,\r\n    garbageDefense: true,\r\n};\r\n\r\nfunction createNewBag(srng: string, bagIndex: number, generator: Function): Array<Piece> {\r\n    let pieces = [Piece.I, Piece.J, Piece.L, Piece.O, Piece.T, Piece.Z, Piece.S];\r\n\r\n    const bag: Array<Piece> = [];\r\n    const rng = generator(`${srng}-bag-${bagIndex}`);\r\n\r\n    for (let i = 0; i < 7; i++) {\r\n        const index = Math.floor(rng() * pieces.length);\r\n\r\n        bag.push(pieces[index]);\r\n        pieces.splice(index, 1);\r\n    };\r\n\r\n    return bag;\r\n}\r\n\r\nfunction createNewBoard(playerId: string, matchId: string, gameId: string, generator: Function): Board {\r\n    const srng = `${playerId}-${matchId}-${gameId}`;\r\n    return {\r\n        srng,\r\n\r\n        tiles: new Array(400).fill(Piece.Empty),\r\n        bag: createNewBag(srng, 0, generator),\r\n\r\n        hold: Piece.Empty,\r\n        canHold: true,\r\n\r\n        lost: false,\r\n\r\n        bagPool: 0,\r\n        garbagePool: 0,\r\n\r\n        move: 0,\r\n\r\n        combo: '',\r\n\r\n        lastDamager: playerId,\r\n        garbageQueue: [],\r\n\r\n        clears: 0,\r\n\r\n        juice: 0,\r\n        lines: 0,\r\n\r\n        finishingMoves: -1,\r\n    };\r\n}\r\n\r\nfunction deepCopyBoard(board: Board): Board {\r\n    return {\r\n        srng: board.srng,\r\n\r\n        tiles: [...board.tiles],\r\n        bag: [...board.bag],\r\n\r\n        hold: board.hold,\r\n        canHold: board.canHold,\r\n\r\n        lost: board.lost,\r\n\r\n        bagPool: board.bagPool,\r\n        garbagePool: board.garbagePool,\r\n\r\n        move: board.move,\r\n\r\n        combo: board.combo,\r\n\r\n        lastDamager: board.lastDamager,\r\n        garbageQueue: [...board.garbageQueue],\r\n\r\n        clears: board.clears,\r\n\r\n        juice: board.juice,\r\n        lines: board.lines,\r\n\r\n        finishingMoves: board.finishingMoves,\r\n    };\r\n}\r\n\r\nfunction highestTile(board: Board): number {\r\n    for (let i = 0; i < 400; i++) {\r\n        if (board.tiles[i] !== Piece.Empty) {\r\n            return Math.floor(i / 10);\r\n        }\r\n    }\r\n    return 40;\r\n}\r\n\r\nfunction highestGarbageTile(board: Board): number {\r\n    for (let i = 0; i < 400; i++) {\r\n        if (board.tiles[i] === Piece.Garbage) {\r\n            return Math.floor(i / 10);\r\n        }\r\n    }\r\n    return 40;\r\n}\r\n\r\nfunction rotateArray(array: Array<Array<number>>, rotation: number): Array<Array<number>> {\r\n    const rot = mod(rotation, 4);\r\n\r\n    if (rot <= 0) {\r\n        return array.map(row => [...row]);\r\n    } else if (rot === 1) {\r\n        return array.map((row, i) => row.map((_, j) => array[array.length - j - 1][i]));\r\n    } else if (rot === 2) {\r\n        return array.map((row, i) => row.map((_, j) => array[array.length - i - 1][array.length - j - 1]));\r\n    } else {\r\n        return array.map((row, i) => row.map((_, j) => array[j][array.length - i - 1]));\r\n    } \r\n\r\n}\r\n\r\nfunction getRotatedPiece(piece: Piece, rotation: number): Array<Array<number>> {\r\n    const layout = PIECES[piece].layout;\r\n    return rotateArray(layout, rotation);\r\n}\r\n\r\nfunction pieceFits(piece: Piece, board: Board, x: number, y: number, rotation: number): boolean {\r\n    const layout = getRotatedPiece(piece, rotation);\r\n\r\n    for (let i = 0; i < layout.length; i++) {\r\n        for (let j = 0; j < layout[i].length; j++) {\r\n\r\n            if (layout[i][j] === 1) {\r\n                const nx = x + j, ny = y + i;\r\n                const index = (ny) * 10 + nx;\r\n\r\n                if (nx < 0 || nx >= 10 || ny < 0 || ny >= 40) {\r\n                    return false;\r\n                }\r\n                if (index > board.tiles.length || index < 0 || board.tiles[index] !== Piece.Empty) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction defaultSubmoveState(): SubmoveState {\r\n    return {\r\n        pieceX: 3,\r\n        pieceY: 16,\r\n        pieceRotation: 0,\r\n        submoves: [],\r\n        lastMoveSuccessful: true,\r\n        dropLines: 0,\r\n    };\r\n}\r\n\r\nfunction makeSubmove(submove: Direction, board: Board, submoveState: SubmoveState): SubmoveState {\r\n\r\n    if (submoveState.submoves.includes(Direction.Drop)) {\r\n        return submoveState;\r\n    }\r\n    \r\n    const state: SubmoveState = {\r\n        pieceX: submoveState.pieceX,\r\n        pieceY: submoveState.pieceY,\r\n        pieceRotation: submoveState.pieceRotation,\r\n        submoves: [...submoveState.submoves],\r\n        lastMoveSuccessful: false,\r\n        dropLines: 0,\r\n    };\r\n\r\n    if (submove === Direction.Left) {\r\n        if (pieceFits(board.bag[0], board, state.pieceX - 1, state.pieceY, state.pieceRotation)) {\r\n            state.pieceX -= 1;\r\n            state.submoves.push(Direction.Left);\r\n            state.lastMoveSuccessful = true;\r\n        }\r\n    } else if (submove === Direction.Right) {\r\n        if (pieceFits(board.bag[0], board, state.pieceX + 1, state.pieceY, state.pieceRotation)) {\r\n            state.pieceX += 1;\r\n            state.submoves.push(Direction.Right);\r\n            state.lastMoveSuccessful = true;\r\n        }\r\n    } else if (submove === Direction.Down) {\r\n        if (pieceFits(board.bag[0], board, state.pieceX, state.pieceY + 1, state.pieceRotation)) {\r\n            state.pieceY += 1;\r\n            state.submoves.push(Direction.Down);\r\n            state.lastMoveSuccessful = true;\r\n        }\r\n    } else if (submove === Direction.Drop) {\r\n        state.submoves.push(Direction.Drop);\r\n        state.lastMoveSuccessful = true;\r\n        while (pieceFits(board.bag[0], board, state.pieceX, state.pieceY + 1, state.pieceRotation)) {\r\n            state.pieceY += 1;\r\n        }\r\n        state.dropLines = state.pieceY - submoveState.pieceY;\r\n    } else if (submove === Direction.RotateRight || submove === Direction.RotateLeft || submove === Direction.Rotate180) {\r\n        if (board.bag[0] !== Piece.O) {\r\n\r\n            const rotate = submove === Direction.RotateRight ? 1 : (submove === Direction.RotateLeft ? -1 : 2);\r\n            const wallKickArray = board.bag[0] == Piece.I ? WALL_KICK_I : WALL_KICK;\r\n\r\n            const oldRotation = state.pieceRotation;\r\n            const newRotation = mod((state.pieceRotation + rotate), 4);\r\n\r\n            for (let i = 0; i < 5; i++) {\r\n                const wallKick = wallKickArray[oldRotation][newRotation][i];\r\n                if (pieceFits(board.bag[0], board, state.pieceX + wallKick[0], state.pieceY - wallKick[1], newRotation)) {\r\n                    state.pieceX = state.pieceX + wallKick[0];\r\n                    state.pieceY = state.pieceY - wallKick[1];\r\n                    state.pieceRotation = newRotation;\r\n                    state.submoves.push(submove);\r\n                    state.lastMoveSuccessful = true;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nfunction getJuiceLevel(juice: number) {\r\n    return Math.log((juice / 2000) + 1) / Math.log(2);\r\n}\r\n\r\nfunction getLevelJuice(level: number) {\r\n    return 2000 * (Math.pow(2, level) - 1);\r\n}\r\n\r\nfunction getCombos(combo: string): Array<any> {\r\n    let combos: Array<any> = [];\r\n    let valid = 0;\r\n\r\n    for (let i = 0; i < combo.length / 2; i += 1) {\r\n        if (combo[i * 2] === \"0\") {\r\n            continue;\r\n        }\r\n\r\n        let addCombo;\r\n        const longCombo = combo.substring(0, i * 2 + 2).replace(/0/g, '');\r\n        for (let j = 0; j <= longCombo.length / 2; j += 1) { \r\n            const newCombo = COMBOS[longCombo.substring(j * 2, i * 2 + 2)];\r\n            if (newCombo) {\r\n                addCombo = { name: newCombo.name, lines: { type: newCombo.lines.type, count: newCombo.lines.count }, juice: { type: newCombo.juice.type, count: newCombo.juice.count } };\r\n                break;\r\n            }\r\n        } \r\n\r\n        if (addCombo) {\r\n            addCombo.original = combo.substring(i * 2, i * 2 + 2);\r\n            if (addCombo.lines.type === 'add') {\r\n                addCombo.lines.count = addCombo.lines.count + Math.max(0, Math.floor(valid / 2));\r\n            } else {\r\n                addCombo.lines.count = addCombo.lines.count * Math.max(1, Math.floor(valid / 2));\r\n            }\r\n            if (addCombo.juice.type === 'add') {\r\n                addCombo.juice.count = addCombo.juice.count * Math.max(1, valid - 1);\r\n            }\r\n            combos.push(addCombo);\r\n            valid += 1;\r\n        }\r\n    }\r\n    return combos;\r\n}\r\n\r\nfunction makeMove(move: Move, board: Board, generator: Function, rules: Rules, ignoreGarbage = false): Board {\r\n\r\n    if (board.lost) {\r\n        return board;\r\n    }\r\n    \r\n    let newBoard = deepCopyBoard(board);\r\n\r\n    let usedPiece = Piece.Empty;\r\n    let submoveState = defaultSubmoveState();\r\n\r\n    switch (move.type) {\r\n        case MoveType.Move:\r\n\r\n            for (const submove of move.submoves || []) {\r\n                submoveState = makeSubmove(submove, newBoard, submoveState);\r\n            }\r\n\r\n            const piece = getRotatedPiece(newBoard.bag[0], submoveState.pieceRotation);\r\n            let over = true;\r\n\r\n            for (let i = 0; i < piece.length; i++) {\r\n                for (let j = 0; j < piece[i].length; j++) {\r\n                    if (piece[i][j] === 1) {\r\n                        const index = (submoveState.pieceY + i) * 10 + submoveState.pieceX + j;\r\n                        newBoard.tiles[index] = newBoard.bag[0];\r\n                        if (index >= 200) {\r\n                            over = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            usedPiece = newBoard.bag.shift() || Piece.Empty;\r\n            newBoard.canHold = true;\r\n\r\n            if (over) {\r\n                newBoard.lost = true;\r\n            }\r\n\r\n            if (newBoard.finishingMoves >= 0) {\r\n                newBoard.finishingMoves -= 1;\r\n            }\r\n\r\n            break;\r\n        case MoveType.Hold:\r\n            if (newBoard.canHold) {\r\n                const hold = newBoard.hold;\r\n                newBoard.hold = newBoard.bag[0];\r\n                newBoard.canHold = false;\r\n                if (hold !== Piece.Empty) {\r\n                    newBoard.bag[0] = hold;\r\n                } else {\r\n                    newBoard.bag.shift();\r\n                }\r\n            }\r\n            break;\r\n        case MoveType.AddGarbage:\r\n            let garbage = move.garbage || 0;\r\n            if (highestTile(newBoard) - garbage <= 0 || highestGarbageTile(newBoard) - garbage <= 20) {\r\n                board.lost = true;\r\n                garbage = highestTile(newBoard);\r\n            }\r\n\r\n            const rng = generator(`${newBoard.srng}-garbage-${garbage}-${newBoard.garbagePool}`);\r\n            newBoard.garbagePool += garbage;\r\n\r\n            const noGarbageIndex = Math.floor(rng() * 10);\r\n\r\n            const preTiles = newBoard.tiles.slice(10 * (garbage));\r\n            const postTiles = new Array(garbage * 10)\r\n                .fill(Piece.Empty)\r\n                .map((_, i) => i % 10 === noGarbageIndex ? Piece.Empty : Piece.Garbage);\r\n\r\n            newBoard.tiles = [...preTiles, ...postTiles];\r\n\r\n            break;\r\n    }\r\n\r\n    if (newBoard.bag.length < 7) {\r\n        newBoard.bag = newBoard.bag.concat(createNewBag(newBoard.srng, newBoard.bagPool, generator));\r\n        newBoard.bagPool++;\r\n    }\r\n\r\n    const lines: Array<Array<number>> = [];\r\n    let clears = 0;\r\n\r\n    for (let i = 0; i < 40; i++) {\r\n        const line = newBoard.tiles.slice(i * 10, (i + 1) * 10);\r\n        const cleared = line.every(tile => tile !== Piece.Empty);\r\n            \r\n        if (cleared) {\r\n\r\n            if (rules.resendGarbage) {\r\n                clears += 1;\r\n            } else if (line.every(tile => tile !== Piece.Garbage)) {\r\n                clears += 1;\r\n            }\r\n            \r\n        } else {\r\n            lines.push(line);\r\n        }\r\n    }\r\n\r\n    newBoard.clears = clears;\r\n    let tSpin = false;\r\n\r\n    newBoard.lines += newBoard.clears;\r\n\r\n    if (newBoard.clears > 0) {\r\n        if (board.finishingMoves >= 0) {\r\n            newBoard.finishingMoves += newBoard.clears;\r\n        }\r\n        let j = 0;\r\n        for (let i = 0; i < newBoard.clears; i++) {\r\n            \r\n            if (newBoard.garbageQueue.length <= 0) {\r\n                break;\r\n            }\r\n\r\n            j += 1;\r\n            const garbage = newBoard.garbageQueue.shift();\r\n\r\n            garbage.amount -= 1;\r\n            if (garbage.amount > 0) {\r\n                newBoard.garbageQueue.unshift(garbage);\r\n            }\r\n        }\r\n        newBoard.clears -= j;\r\n\r\n        if (rules.garbageDefense) {\r\n            for (let garbage of newBoard.garbageQueue) {\r\n                garbage.turns += 1;\r\n            }\r\n        }\r\n\r\n        if (newBoard.clears > 0 && usedPiece === Piece.T && submoveState.dropLines === 0) {\r\n            const submoves = move.submoves || [];\r\n            const lastMove = [...submoves].reverse().find(submove => submove !== Direction.Down && submove !== Direction.Drop);\r\n            if (lastMove === Direction.RotateLeft || lastMove === Direction.RotateRight) {\r\n                \r\n                function check(x, y) {\r\n                    return x < 0 || x >= 10 || y < 0 || y >= 40 || newBoard.tiles[y * 10 + x] !== Piece.Empty;\r\n                }\r\n\r\n                const piece = rotateArray(T_CHECK, submoveState.pieceRotation);\r\n\r\n                let corners = 0;\r\n\r\n                for (let i = 0; i < piece.length; i++) {\r\n                    for (let j = 0; j < piece[i].length; j++) {\r\n                        if (piece[i][j] === 1) {\r\n                            if (check(submoveState.pieceX + j, submoveState.pieceY + i)) {\r\n                                corners += 1;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (corners >= 3) {\r\n                    tSpin = true;\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    const newTiles = new Array(400).fill(Piece.Empty);\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n        newTiles.splice((i + (40 - lines.length)) * 10, 10, ...lines[i]);\r\n    }\r\n\r\n    newBoard.tiles = newTiles;\r\n\r\n    if (!ignoreGarbage && move.type === MoveType.Move) {\r\n\r\n        for (let i = 0; i < newBoard.garbageQueue.length; i++) {\r\n            const garbage = newBoard.garbageQueue[i];\r\n            garbage.turns -= 1;\r\n\r\n            if (garbage.turns <= 0) {\r\n                newBoard.lastDamager = garbage.player;\r\n                newBoard = makeMove({ type: MoveType.AddGarbage, garbage: garbage.amount}, newBoard, generator, rules, true);\r\n            }\r\n        }\r\n            \r\n        newBoard.garbageQueue = newBoard.garbageQueue.filter(garbage => garbage.turns > 0);\r\n    }\r\n\r\n    const newLayout = PIECES[newBoard.bag[0]].layout;\r\n\r\n    for (let i = 0; i < newLayout.length; i++) {\r\n        for (let j = 0; j < newLayout[i].length; j++) {\r\n            if (newLayout[i][j] === 1) {\r\n                const index = (i + 16) * 10 + (j + 3);\r\n                if (newBoard.tiles[index] !== Piece.Empty) {\r\n                    newBoard.lost = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (move.type === MoveType.Move) {\r\n        if (newBoard.clears <= 0) {\r\n            if (newBoard.combo.length >= 2) {\r\n                if (!rules.forgivingCombos || newBoard.combo.substring(newBoard.combo.length - 2) === '00') {\r\n                    if (newBoard.finishingMoves < 0) { \r\n                        newBoard.combo = '';\r\n                    }\r\n                } else {\r\n                    newBoard.combo += '00';\r\n                }\r\n            }\r\n        } else {\r\n            newBoard.combo += newBoard.clears + (tSpin ? 't' : 'l');\r\n    \r\n            if (newTiles.every(tile => tile === Piece.Empty)) {\r\n                newBoard.combo += 'fc';\r\n            }\r\n\r\n            const combos = getCombos(newBoard.combo);\r\n            const lastCombo = combos[combos.length - 1];\r\n\r\n            if (lastCombo.juice.type === 'multiply') {\r\n                let totalJuice = 0;\r\n                for (let combo of combos) {\r\n                    if (combo.juice.type === 'multiply') {\r\n                        continue;\r\n                    }\r\n                    totalJuice += combo.juice.count;\r\n                }\r\n                newBoard.juice += totalJuice;\r\n            } else {\r\n                newBoard.juice += lastCombo.juice.count;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (newBoard.finishingMoves < 0 && board.finishingMoves >= 0) {\r\n        newBoard.lost = true;\r\n    }\r\n\r\n    return newBoard;\r\n\r\n}\r\n\r\nfunction mod(n, m) {\r\n    return ((n % m) + m) % m;\r\n}"],"names":[],"version":3,"file":"index.988c21c6.js.map","sourceRoot":"/__parcel_source_root/"}