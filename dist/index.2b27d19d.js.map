{"mappings":"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","sources":["client.ts"],"sourcesContent":["const PIECES = [\r\n    {\r\n        layout: [ // I-piece 0\r\n            [0, 0, 0, 0],\r\n            [1, 1, 1, 1],\r\n            [0, 0, 0, 0],\r\n            [0, 0, 0, 0]\r\n        ], \r\n        color: [130, 250, 230]\r\n    },\r\n    {\r\n        layout: [ // J-piece 1\r\n            [1, 0, 0],\r\n            [1, 1, 1],\r\n            [0, 0, 0]\r\n        ], color: [130, 150, 250]\r\n    },\r\n    {\r\n        layout: [ // L-piece 2\r\n            [0, 0, 1],\r\n            [1, 1, 1],\r\n            [0, 0, 0]\r\n        ], \r\n        color: [240, 160, 110]\r\n    },\r\n    {\r\n        layout: [ // O-piece 3\r\n            [1, 1],\r\n            [1, 1]\r\n        ], \r\n        color: [240, 230, 110]\r\n    },\r\n    {\r\n        layout: [ // T-piece 4\r\n            [0, 1, 0],\r\n            [1, 1, 1],\r\n            [0, 0, 0]\r\n        ], \r\n        color: [180, 130, 240]\r\n    },\r\n    {\r\n        layout: [ // Z-piece 5\r\n            [1, 1, 0],\r\n            [0, 1, 1],\r\n            [0, 0, 0]\r\n        ], \r\n        color: [240, 130, 150]\r\n    },\r\n    {\r\n        layout: [ // S-piece 6\r\n            [0, 1, 1],\r\n            [1, 1, 0],\r\n            [0, 0, 0]\r\n        ], \r\n        color: [130, 240, 120]\r\n    },\r\n    {\r\n        layout: [ // Garbage 7 (Not intended to be used)\r\n            [1]\r\n        ],\r\n        color: [200, 200, 200],\r\n    }\r\n];\r\n\r\nconst COMBOS = {\r\n    '00': { name: 'none', lines: { type: 'add', count: 0 }, juice: { type: 'add', count: 0 }},\r\n    // 1 - order\r\n\r\n    '1l': { name: 'single', lines: { type: 'add', count: 1 }, juice: { type: 'add', count: 100 } },\r\n    '2l': { name: 'double', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 } },\r\n    '3l': { name: 'triple', lines: { type: 'add', count: 3 }, juice: { type: 'add', count: 900 } },\r\n    '4l': { name: 'chentris', lines: { type: 'add', count: 4 }, juice: { type: 'add', count: 1600 } },\r\n    '1t': { name: 't-spin single', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 } },\r\n    '2t': { name: 't-spin double', lines: { type: 'add', count: 4 }, juice: { type: 'add', count: 1000 } },\r\n    '3t': { name: 't-spin triple', lines: { type: 'add', count: 6 }, juice: { type: 'add', count: 3200 } },\r\n    'fc': { name: 'full clear', lines: { type: 'add', count: 4 }, juice: { type: 'multiply', count: 2 } },\r\n\r\n    // 2 - order\r\n\r\n    '1l1l': { name: 'snake eyes', lines: { type: 'add', count: 1 }, juice: { type: 'add', count: 100 + 100 } },\r\n    '1l2l': { name: 'the old one two', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 100 } },\r\n    '1l3l': { name: 'the old one three', lines: { type: 'add', count: 3 }, juice: { type: 'add', count: 900 + 100 } },\r\n    '1l4l': { name: 'big five', lines: { type: 'add', count: 4 }, juice: { type: 'add', count: 1600 + 200 } },\r\n    '1l1t': { name: 'snake spins', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 100 } },\r\n    '1l2t': { name: 'the old one two spin', lines: { type: 'add', count: 4 }, juice: { type: 'add', count: 1000 + 100 } },\r\n    '1l3t': { name: 'the old one three spin', lines: { type: 'add', count: 6 }, juice: { type: 'add', count: 3200 + 200 } },\r\n    '1lfc': { name: 'one line full clear', lines: { type: 'add', count: 4 }, juice: { type: 'multiply', count: 2 } },\r\n\r\n    '2l1l': { name: 'stepdown', lines: { type: 'add', count: 1 }, juice: { type: 'add', count: 100 + 200 } },\r\n    '2l2l': { name: 'halftris', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 200 } },\r\n    '2l3l': { name: 'up a notch', lines: { type: 'add', count: 3 }, juice: { type: 'add', count: 900 + 200 } },\r\n    '2l4l': { name: 'big six', lines: { type: 'add', count: 4 }, juice: { type: 'add', count: 1600 + 400 } },\r\n    '2l1t': { name: 'spindown', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 200 } },\r\n    '2l2t': { name: 'spindle', lines: { type: 'add', count: 4 }, juice: { type: 'add', count: 1000 + 200 } },\r\n    '2l3t': { name: 'up a spin', lines: { type: 'add', count: 6 }, juice: { type: 'add', count: 3200 + 400 } },\r\n    '2lfc': { name: 'double trouble', lines: { type: 'add', count: 4 + 1 }, juice: { type: 'multiply', count: 2 } },\r\n\r\n    '3l1l': { name: 'downtris', lines: { type: 'add', count: 1 }, juice: { type: 'add', count: 100 + 400 } },\r\n    '3l2l': { name: 'leapdown', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 400 } },\r\n    '3l3l': { name: 'trippy', lines: { type: 'add', count: 3 }, juice: { type: 'add', count: 900 + 400 } },\r\n    '3l4l': { name: 'lucky guy', lines: { type: 'add', count: 4 + 1 }, juice: { type: 'add', count: 1600 + 800 } },\r\n    '3l1t': { name: 'spinleap', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 400 } },\r\n    '3l2t': { name: 'trippy spin', lines: { type: 'add', count: 4 }, juice: { type: 'add', count: 1000 + 400 } },\r\n    '3l3t': { name: 'linespin equality', lines: { type: 'add', count: 6 + 1 }, juice: { type: 'add', count: 3200 + 800 } },\r\n    '3lfc': { name: 'trippy clear', lines: { type: 'add', count: 4 + 2 }, juice: { type: 'multiply', count: 2 } },\r\n\r\n    '4l1l': { name: 'small five', lines: { type: 'add', count: 1 }, juice: { type: 'add', count: 100 + 800 } },\r\n    '4l2l': { name: 'small six', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 800 } },\r\n    '4l3l': { name: 'guy lucky', lines: { type: 'add', count: 3 + 1 }, juice: { type: 'add', count: 900 + 800 } },\r\n    '4l4l': { name: 'b2b', lines: { type: 'add', count: 4 + 2 }, juice: { type: 'add', count: 1600 + 1600 } },\r\n    '4l1t': { name: 'chenspin', lines: { type: 'add', count: 2 + 1 }, juice: { type: 'add', count: 400 + 800 } },\r\n    '4l2t': { name: 'halfdown', lines: { type: 'add', count: 4 + 1 }, juice: { type: 'add', count: 1000 + 800 } },\r\n    '4l3t': { name: 'spinlucky', lines: { type: 'add', count: 6 + 2 }, juice: { type: 'add', count: 3200 + 1600 } },\r\n    '4lfc': { name: 'perfect clear', lines: { type: 'add', count: 4 + 4 }, juice: { type: 'multiply', count: 2 } },\r\n\r\n    '1t1l': { name: 'singulari-t', lines: { type: 'add', count: 1 }, juice: { type: 'add', count: 100 + 200 } },\r\n    '1t2l': { name: 'reverse spindle', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 200 } },\r\n    '1t3l': { name: 'trip from t', lines: { type: 'add', count: 3 }, juice: { type: 'add', count: 900 + 200 } },\r\n    '1t4l': { name: 'post-t chentris', lines: { type: 'add', count: 4 + 1 }, juice: { type: 'add', count: 1600 + 400 } },\r\n    '1t1t': { name: 'double it', lines: { type: 'add', count: 2 + 1 }, juice: { type: 'add', count: 400 + 200 } },\r\n    '1t2t': { name: 'red-t blue-t', lines: { type: 'add', count: 4 + 1 }, juice: { type: 'add', count: 1000 + 200 } },\r\n    '1t3t': { name: 'chen-t', lines: { type: 'add', count: 6 + 1 }, juice: { type: 'add', count: 3200 + 400 } },\r\n    '1tfc': { name: 't-clear', lines: { type: 'add', count: 4 + 2 }, juice: { type: 'multiply', count: 2 } },\r\n\r\n    '2t1l': { name: 'keep it on the t-l', lines: { type: 'add', count: 1 }, juice: { type: 'add', count: 100 + 400 } },\r\n    '2t2l': { name: '2 spin 2 line', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 400 } },\r\n    '2t3l': { name: 'spinny trip', lines: { type: 'add', count: 3 }, juice: { type: 'add', count: 900 + 400 } },\r\n    '2t4l': { name: '2 spin 4 me', lines: { type: 'add', count: 4 + 1 }, juice: { type: 'add', count: 1600 + 800 } },\r\n    '2t1t': { name: 'stepdown-t', lines: { type: 'add', count: 2 + 1 }, juice: { type: 'add', count: 400 + 400 } },\r\n    '2t2t': { name: 'adds to 40', lines: { type: 'add', count: 4 + 1 }, juice: { type: 'add', count: 1000 + 400 } },\r\n    '2t3t': { name: 'nathan special', lines: { type: 'add', count: 6 + 1 }, juice: { type: 'add', count: 3200 + 800 } },\r\n    '2tfc': { name: 'double t-clear', lines: { type: 'add', count: 4 + 2 }, juice: { type: 'multiply', count: 2 } },\r\n\r\n    '3t1l': { name: 'leapspin', lines: { type: 'add', count: 1 }, juice: { type: 'add', count: 100 + 200 } },\r\n    '3t2l': { name: 'stepspin', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 200 } },\r\n    '3t3l': { name: 'trippy spinline', lines: { type: 'add', count: 3 }, juice: { type: 'add', count: 900 + 200 } },\r\n    '3t4l': { name: 'luckyspin', lines: { type: 'add', count: 4 + 2 }, juice: { type: 'add', count: 1600 + 400 } },\r\n    '3t1t': { name: 't-chen', lines: { type: 'add', count: 2 + 2 }, juice: { type: 'add', count: 400 + 200 } },\r\n    '3t2t': { name: 'reverse nathan special', lines: { type: 'add', count: 4 + 2 }, juice: { type: 'add', count: 1000 + 200 } },\r\n    '3t3t': { name: 'trip trip goose', lines: { type: 'add', count: 6 + 2 }, juice: { type: 'add', count: 3200 + 400 } },\r\n    '3tfc': { name: 'nasty triple t-clear', lines: { type: 'add', count: 4 + 4 }, juice: { type: 'multiply', count: 2 } },\r\n\r\n    // 3 - order\r\n\r\n    // 1 line\r\n\r\n    '1l1l1l': { name: 'three eyed snake', lines: { type: 'add', count: 1 }, juice: { type: 'add', count: 100 + 400 } },\r\n    '1l1l2l': { name: 'fibonacci-3', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 400 } },\r\n    '1l1l3l': { name: '1 + 1 = 3', lines: { type: 'add', count: 3 }, juice: { type: 'add', count: 900 + 400 } },\r\n    '1l1l4l': { name: 'eeh ?!', lines: { type: 'add', count: 4 + 1 }, juice: { type: 'add', count: 1600 + 800 } },\r\n\r\n    '1l1l1l1l': { name: 'still single?', lines: { type: 'add', count: 1 + 1 }, juice: { type: 'add', count: 100 + 800 } },\r\n    '1l1l1l1l1l': { name: 'leave the house', lines: { type: 'add', count: 1 + 2 }, juice: { type: 'add', count: 100 + 1600 } },\r\n    '1l1l2l3l': { name: 'fibonacci-4', lines: { type: 'add', count: 3 + 2 }, juice: { type: 'add', count: 900 + 1600 } },\r\n\r\n    '1l2l1l': { name: 'up then down', lines: { type: 'add', count: 1 }, juice: { type: 'add', count: 100 + 400 } },\r\n    '1l2l2l': { name: 'bad at counting', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 400 } },\r\n    '1l2l3l': { name: 'counting up', lines: { type: 'add', count: 3 }, juice: { type: 'add', count: 900 + 400 } },\r\n    '1l2l4l': { name: 'powers of two', lines: { type: 'add', count: 4 + 1 }, juice: { type: 'add', count: 1600 + 800 } },\r\n\r\n    '1l2l3l4l': { name: 'counting higher', lines: { type: 'add', count: 4 + 2 }, juice: { type: 'add', count: 1600 + 1600 } },\r\n\r\n    '1l3l1l': { name: 'small spark', lines: { type: 'add', count: 1 }, juice: { type: 'add', count: 100 + 400 } },\r\n    '1l3l2l': { name: 'really bad at counting', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 400 } },\r\n    '1l3l3l': { name: 'two triple post single', lines: { type: 'add', count: 3 }, juice: { type: 'add', count: 900 + 400 } },\r\n    '1l3l4l': { name: 'building chentris', lines: { type: 'add', count: 4 + 1 }, juice: { type: 'add', count: 1600 + 800 } },\r\n\r\n    '1l4l1l': { name: 'big spark', lines: { type: 'add', count: 1 }, juice: { type: 'add', count: 100 + 800 } },\r\n    '1l4l2l': { name: 'single meaning', lines: { type: 'add', count: 2 }, juice: { type: 'add', count: 400 + 800 } },\r\n    '1l4l3l': { name: 'composite', lines: { type: 'add', count: 3 + 1 }, juice: { type: 'add', count: 900 + 800 } },\r\n    '1l4l4l': { name: 'single into b2b', lines: { type: 'add', count: 4 + 2 }, juice: { type: 'add', count: 1600 + 1600 } },\r\n\r\n    // 2 lines\r\n};\r\n\r\nconst T_CHECK = [\r\n    [1, 0, 1],\r\n    [0, 0, 0],\r\n    [1, 0, 1]\r\n];\r\n\r\nconst WALL_KICK = {\r\n    0: {\r\n        3: [\r\n            [0, 0],\r\n            [1, 0],\r\n            [1, 1],\r\n            [0, -2],\r\n            [1, -2],\r\n        ],\r\n        1: [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [-1, 1],\r\n            [0, -2],\r\n            [-1, -2],\r\n        ],\r\n        2: [\r\n            [0, 0],\r\n            [1, 0],\r\n            [2, 0],\r\n            [1, 1],\r\n            [2, 1],\r\n            [-1, 0],\r\n            [-2, 0],\r\n            [-1, 1],\r\n            [-2, 1],\r\n            [0, -1],\r\n            [3, 0],\r\n            [-3, 0]\r\n        ]\r\n    },\r\n    1: {\r\n        0: [\r\n            [0, 0],\r\n            [1, 0],\r\n            [1, -1],\r\n            [0, 2],\r\n            [1, 2],\r\n        ],\r\n        2: [\r\n            [0, 0],\r\n            [1, 0],\r\n            [1, -1],\r\n            [0, 2],\r\n            [1, 2],\r\n        ],\r\n        3: [\r\n            [0, 0],\r\n            [0, 1],\r\n            [0, 2],\r\n            [-1, 1],\r\n            [-1, 2],\r\n            [0, -1],\r\n            [0, -2],\r\n            [-1, -1],\r\n            [-1, -2],\r\n            [1, 0],\r\n            [0, 3],\r\n            [0, -3]\r\n        ]\r\n    },\r\n    2: {\r\n        1: [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [-1, 1],\r\n            [0, -2],\r\n            [-1, -2],\r\n        ],\r\n        3: [\r\n            [0, 0],\r\n            [1, 0],\r\n            [1, 1],\r\n            [0, -2],\r\n            [1, -2],\r\n        ],\r\n        0: [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [-2, 0],\r\n            [-1, -1],\r\n            [-2,-1],\r\n            [1, 0],\r\n            [2, 0],\r\n            [1, -1],\r\n            [2, -1],\r\n            [0, 1],\r\n            [-3, 0],\r\n            [3, 0]\r\n        ]\r\n    },\r\n    3: {\r\n        2: [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [-1, -1],\r\n            [0, 2],\r\n            [-1, 2],\r\n        ],\r\n        0: [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [-1, -1],\r\n            [0, 2],\r\n            [-1, 2],\r\n        ],\r\n        1: [\r\n            [0, 0],\r\n            [0, 1],\r\n            [0, 2],\r\n            [1, 1],\r\n            [1, 2],\r\n            [0, -1],\r\n            [0, -2],\r\n            [1, -1],\r\n            [1, -2],\r\n            [-1, 0],\r\n            [0, 3],\r\n            [0, -3]\r\n        ]\r\n    }\r\n}\r\n  \r\nconst WALL_KICK_I = {\r\n    0: {\r\n        3: [\r\n            [0, 0],\r\n            [2, 0],\r\n            [-1, 0],\r\n            [-1, 2],\r\n            [2, -1],\r\n        ],\r\n        1: [\r\n            [0, 0],\r\n            [-2, 0],\r\n            [1, 0],\r\n            [1, 2],\r\n            [-2, -1],\r\n        ],\r\n        2: [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [-2, 0],\r\n            [1, 0],\r\n            [2, 0],\r\n            [0, 1]\r\n        ]\r\n    },\r\n    1: {\r\n        0: [\r\n            [0, 0],\r\n            [2, 0],\r\n            [-1, 0],\r\n            [2, 1],\r\n            [-1, -2],\r\n        ],\r\n        2: [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [2, 0],\r\n            [-1, 2],\r\n            [2, -1],\r\n        ],\r\n        3: [\r\n            [0, 0],\r\n            [0, 1],\r\n            [0, 2],\r\n            [0, -1],\r\n            [0, -2],\r\n            [-1, 0]\r\n        ]\r\n    },\r\n    2: {\r\n        1: [\r\n            [0, 0],\r\n            [-2, 0],\r\n            [1, 0],\r\n            [-2, 1],\r\n            [1, -1],\r\n        ],\r\n        3: [\r\n            [0, 0],\r\n            [2, 0],\r\n            [-1, 0],\r\n            [2, 1],\r\n            [-1, -1],\r\n        ],\r\n        0: [\r\n            [0, 0],\r\n            [1, 0],\r\n            [2, 0],\r\n            [-1, 0],\r\n            [-2, 0],\r\n            [0, -1]\r\n        ]\r\n    },\r\n    3: {\r\n        2: [\r\n            [0, 0],\r\n            [1, 0],\r\n            [-2, 0],\r\n            [1, 2],\r\n            [-2, -1],\r\n        ],\r\n        0: [\r\n            [0, 0],\r\n            [-2, 0],\r\n            [1, 0],\r\n            [-2, 1],\r\n            [1, -2],\r\n        ],\r\n        1: [\r\n            [0, 0],\r\n            [0, 1],\r\n            [0, 2],\r\n            [0, -1],\r\n            [0, -2],\r\n            [1, 0]\r\n        ]\r\n    }\r\n}\r\n\r\ninterface Board {\r\n    srng: string,\r\n\r\n    tiles: Array<number>,\r\n    bag: Array<Piece>,\r\n\r\n    hold: Piece,\r\n    canHold: boolean,\r\n\r\n    lost: boolean,\r\n\r\n    bagPool: number,\r\n    garbagePool: number,\r\n\r\n    move: number,\r\n\r\n    combo: string,\r\n\r\n    lastDamager: string,\r\n    garbageQueue: Array<any>,\r\n\r\n    clears: number,\r\n\r\n    juice: number,\r\n    lines: number,\r\n\r\n    finishingMoves: number,\r\n};\r\n\r\ninterface Move {\r\n    type: MoveType,\r\n    submoves?: Array<Direction>,\r\n    garbage?: number,\r\n};\r\n\r\ninterface SubmoveState {\r\n    pieceX: number,\r\n    pieceY: number,\r\n    pieceRotation: number,\r\n    submoves: Array<Direction>,\r\n    lastMoveSuccessful: boolean,\r\n    dropLines: number,\r\n}\r\n\r\nenum Piece {\r\n    Empty = -1,\r\n    I = 0,\r\n    J = 1,\r\n    L = 2,\r\n    O = 3,\r\n    T = 4,\r\n    Z = 5,\r\n    S = 6,\r\n    Garbage = 7,\r\n};\r\n\r\nenum MoveType {\r\n    Move = \"move\",\r\n    Hold = \"hold\",\r\n    AddGarbage = \"addGarbage\",\r\n};\r\n\r\nenum Direction {\r\n    Left = \"left\",\r\n    Right = \"right\",\r\n\r\n    Down = \"down\",\r\n    Drop = \"drop\",\r\n\r\n    RotateRight = \"rotateRight\",\r\n    RotateLeft = \"rotateLeft\",\r\n    Rotate180 = \"rotate180\",\r\n};\r\n\r\ninterface Rules {\r\n    competitive: boolean,\r\n    initialSpeed: number,\r\n    resendGarbage: boolean,\r\n    forgivingCombos: boolean,\r\n    garbageTurns: number,\r\n    garbageDefense: boolean,\r\n}\r\n\r\nconst COMPETITIVE_DEFAULTS: Rules = {\r\n    competitive: true,\r\n    initialSpeed: 80,\r\n    resendGarbage: true,\r\n    forgivingCombos: false,\r\n    garbageTurns: 1,\r\n    garbageDefense: false,\r\n};\r\n\r\nconst NORMAL_DEFAULTS: Rules = {\r\n    competitive: false,\r\n    initialSpeed: 80,\r\n    resendGarbage: true,\r\n    forgivingCombos: true,\r\n    garbageTurns: 2,\r\n    garbageDefense: true,\r\n};\r\n\r\nfunction createNewBag(srng: string, bagIndex: number, generator: Function): Array<Piece> {\r\n    let pieces = [Piece.I, Piece.J, Piece.L, Piece.O, Piece.T, Piece.Z, Piece.S];\r\n\r\n    const bag: Array<Piece> = [];\r\n    const rng = generator(`${srng}-bag-${bagIndex}`);\r\n\r\n    for (let i = 0; i < 7; i++) {\r\n        const index = Math.floor(rng() * pieces.length);\r\n\r\n        bag.push(pieces[index]);\r\n        pieces.splice(index, 1);\r\n    };\r\n\r\n    return bag;\r\n}\r\n\r\nfunction createNewBoard(playerId: string, matchId: string, gameId: string, generator: Function): Board {\r\n    const srng = `${playerId}-${matchId}-${gameId}`;\r\n    return {\r\n        srng,\r\n\r\n        tiles: new Array(400).fill(Piece.Empty),\r\n        bag: createNewBag(srng, 0, generator),\r\n\r\n        hold: Piece.Empty,\r\n        canHold: true,\r\n\r\n        lost: false,\r\n\r\n        bagPool: 0,\r\n        garbagePool: 0,\r\n\r\n        move: 0,\r\n\r\n        combo: '',\r\n\r\n        lastDamager: playerId,\r\n        garbageQueue: [],\r\n\r\n        clears: 0,\r\n\r\n        juice: 0,\r\n        lines: 0,\r\n\r\n        finishingMoves: -1,\r\n    };\r\n}\r\n\r\nfunction deepCopyBoard(board: Board): Board {\r\n    return {\r\n        srng: board.srng,\r\n\r\n        tiles: [...board.tiles],\r\n        bag: [...board.bag],\r\n\r\n        hold: board.hold,\r\n        canHold: board.canHold,\r\n\r\n        lost: board.lost,\r\n\r\n        bagPool: board.bagPool,\r\n        garbagePool: board.garbagePool,\r\n\r\n        move: board.move,\r\n\r\n        combo: board.combo,\r\n\r\n        lastDamager: board.lastDamager,\r\n        garbageQueue: [...board.garbageQueue],\r\n\r\n        clears: board.clears,\r\n\r\n        juice: board.juice,\r\n        lines: board.lines,\r\n\r\n        finishingMoves: board.finishingMoves,\r\n    };\r\n}\r\n\r\nfunction highestTile(board: Board): number {\r\n    for (let i = 0; i < 400; i++) {\r\n        if (board.tiles[i] !== Piece.Empty) {\r\n            return Math.floor(i / 10);\r\n        }\r\n    }\r\n    return 40;\r\n}\r\n\r\nfunction highestGarbageTile(board: Board): number {\r\n    for (let i = 0; i < 400; i++) {\r\n        if (board.tiles[i] === Piece.Garbage) {\r\n            return Math.floor(i / 10);\r\n        }\r\n    }\r\n    return 40;\r\n}\r\n\r\nfunction rotateArray(array: Array<Array<number>>, rotation: number): Array<Array<number>> {\r\n    const rot = mod(rotation, 4);\r\n\r\n    if (rot <= 0) {\r\n        return array.map(row => [...row]);\r\n    } else if (rot === 1) {\r\n        return array.map((row, i) => row.map((_, j) => array[array.length - j - 1][i]));\r\n    } else if (rot === 2) {\r\n        return array.map((row, i) => row.map((_, j) => array[array.length - i - 1][array.length - j - 1]));\r\n    } else {\r\n        return array.map((row, i) => row.map((_, j) => array[j][array.length - i - 1]));\r\n    } \r\n\r\n}\r\n\r\nfunction getRotatedPiece(piece: Piece, rotation: number): Array<Array<number>> {\r\n    const layout = PIECES[piece].layout;\r\n    return rotateArray(layout, rotation);\r\n}\r\n\r\nfunction pieceFits(piece: Piece, board: Board, x: number, y: number, rotation: number): boolean {\r\n    const layout = getRotatedPiece(piece, rotation);\r\n\r\n    for (let i = 0; i < layout.length; i++) {\r\n        for (let j = 0; j < layout[i].length; j++) {\r\n\r\n            if (layout[i][j] === 1) {\r\n                const nx = x + j, ny = y + i;\r\n                const index = (ny) * 10 + nx;\r\n\r\n                if (nx < 0 || nx >= 10 || ny < 0 || ny >= 40) {\r\n                    return false;\r\n                }\r\n                if (index > board.tiles.length || index < 0 || board.tiles[index] !== Piece.Empty) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction defaultSubmoveState(): SubmoveState {\r\n    return {\r\n        pieceX: 3,\r\n        pieceY: 16,\r\n        pieceRotation: 0,\r\n        submoves: [],\r\n        lastMoveSuccessful: true,\r\n        dropLines: 0,\r\n    };\r\n}\r\n\r\nfunction makeSubmove(submove: Direction, board: Board, submoveState: SubmoveState): SubmoveState {\r\n\r\n    if (submoveState.submoves.includes(Direction.Drop)) {\r\n        return submoveState;\r\n    }\r\n    \r\n    const state: SubmoveState = {\r\n        pieceX: submoveState.pieceX,\r\n        pieceY: submoveState.pieceY,\r\n        pieceRotation: submoveState.pieceRotation,\r\n        submoves: [...submoveState.submoves],\r\n        lastMoveSuccessful: false,\r\n        dropLines: 0,\r\n    };\r\n\r\n    if (submove === Direction.Left) {\r\n        if (pieceFits(board.bag[0], board, state.pieceX - 1, state.pieceY, state.pieceRotation)) {\r\n            state.pieceX -= 1;\r\n            state.submoves.push(Direction.Left);\r\n            state.lastMoveSuccessful = true;\r\n        }\r\n    } else if (submove === Direction.Right) {\r\n        if (pieceFits(board.bag[0], board, state.pieceX + 1, state.pieceY, state.pieceRotation)) {\r\n            state.pieceX += 1;\r\n            state.submoves.push(Direction.Right);\r\n            state.lastMoveSuccessful = true;\r\n        }\r\n    } else if (submove === Direction.Down) {\r\n        if (pieceFits(board.bag[0], board, state.pieceX, state.pieceY + 1, state.pieceRotation)) {\r\n            state.pieceY += 1;\r\n            state.submoves.push(Direction.Down);\r\n            state.lastMoveSuccessful = true;\r\n        }\r\n    } else if (submove === Direction.Drop) {\r\n        state.submoves.push(Direction.Drop);\r\n        state.lastMoveSuccessful = true;\r\n        while (pieceFits(board.bag[0], board, state.pieceX, state.pieceY + 1, state.pieceRotation)) {\r\n            state.pieceY += 1;\r\n        }\r\n        state.dropLines = state.pieceY - submoveState.pieceY;\r\n    } else if (submove === Direction.RotateRight || submove === Direction.RotateLeft || submove === Direction.Rotate180) {\r\n        if (board.bag[0] !== Piece.O) {\r\n\r\n            const rotate = submove === Direction.RotateRight ? 1 : (submove === Direction.RotateLeft ? -1 : 2);\r\n            const wallKickArray = board.bag[0] == Piece.I ? WALL_KICK_I : WALL_KICK;\r\n\r\n            const oldRotation = state.pieceRotation;\r\n            const newRotation = mod((state.pieceRotation + rotate), 4);\r\n\r\n            for (let i = 0; i < 5; i++) {\r\n                const wallKick = wallKickArray[oldRotation][newRotation][i];\r\n                if (pieceFits(board.bag[0], board, state.pieceX + wallKick[0], state.pieceY - wallKick[1], newRotation)) {\r\n                    state.pieceX = state.pieceX + wallKick[0];\r\n                    state.pieceY = state.pieceY - wallKick[1];\r\n                    state.pieceRotation = newRotation;\r\n                    state.submoves.push(submove);\r\n                    state.lastMoveSuccessful = true;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nfunction getJuiceLevel(juice: number) {\r\n    return Math.log((juice / 2000) + 1) / Math.log(2);\r\n}\r\n\r\nfunction getLevelJuice(level: number) {\r\n    return 2000 * (Math.pow(2, level) - 1);\r\n}\r\n\r\nfunction getCombos(combo: string): Array<any> {\r\n    let combos: Array<any> = [];\r\n    let valid = 0;\r\n\r\n    for (let i = 0; i < combo.length / 2; i += 1) {\r\n        if (combo[i * 2] === \"0\") {\r\n            continue;\r\n        }\r\n\r\n        let addCombo;\r\n        const longCombo = combo.substring(0, i * 2 + 2).replace(/0/g, '');\r\n        for (let j = 0; j <= longCombo.length / 2; j += 1) { \r\n            const newCombo = COMBOS[longCombo.substring(j * 2, i * 2 + 2)];\r\n            if (newCombo) {\r\n                addCombo = { name: newCombo.name, lines: { type: newCombo.lines.type, count: newCombo.lines.count }, juice: { type: newCombo.juice.type, count: newCombo.juice.count } };\r\n                break;\r\n            }\r\n        } \r\n\r\n        if (addCombo) {\r\n            addCombo.original = combo.substring(i * 2, i * 2 + 2);\r\n            if (addCombo.lines.type === 'add') {\r\n                addCombo.lines.count = addCombo.lines.count + Math.max(0, Math.floor(valid / 2));\r\n            } else {\r\n                addCombo.lines.count = addCombo.lines.count * Math.max(1, Math.floor(valid / 2));\r\n            }\r\n            if (addCombo.juice.type === 'add') {\r\n                addCombo.juice.count = addCombo.juice.count * Math.max(1, valid - 1);\r\n            }\r\n            combos.push(addCombo);\r\n            valid += 1;\r\n        }\r\n    }\r\n    return combos;\r\n}\r\n\r\nfunction makeMove(move: Move, board: Board, generator: Function, rules: Rules, ignoreGarbage = false): Board {\r\n\r\n    if (board.lost) {\r\n        return board;\r\n    }\r\n    \r\n    let newBoard = deepCopyBoard(board);\r\n\r\n    let usedPiece = Piece.Empty;\r\n    let submoveState = defaultSubmoveState();\r\n\r\n    switch (move.type) {\r\n        case MoveType.Move:\r\n\r\n            for (const submove of move.submoves || []) {\r\n                submoveState = makeSubmove(submove, newBoard, submoveState);\r\n            }\r\n\r\n            const piece = getRotatedPiece(newBoard.bag[0], submoveState.pieceRotation);\r\n            let over = true;\r\n\r\n            for (let i = 0; i < piece.length; i++) {\r\n                for (let j = 0; j < piece[i].length; j++) {\r\n                    if (piece[i][j] === 1) {\r\n                        const index = (submoveState.pieceY + i) * 10 + submoveState.pieceX + j;\r\n                        newBoard.tiles[index] = newBoard.bag[0];\r\n                        if (index >= 200) {\r\n                            over = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            usedPiece = newBoard.bag.shift() || Piece.Empty;\r\n            newBoard.canHold = true;\r\n\r\n            if (over) {\r\n                newBoard.lost = true;\r\n            }\r\n\r\n            if (newBoard.finishingMoves >= 0) {\r\n                newBoard.finishingMoves -= 1;\r\n            }\r\n\r\n            break;\r\n        case MoveType.Hold:\r\n            if (newBoard.canHold) {\r\n                const hold = newBoard.hold;\r\n                newBoard.hold = newBoard.bag[0];\r\n                newBoard.canHold = false;\r\n                if (hold !== Piece.Empty) {\r\n                    newBoard.bag[0] = hold;\r\n                } else {\r\n                    newBoard.bag.shift();\r\n                }\r\n            }\r\n            break;\r\n        case MoveType.AddGarbage:\r\n            let garbage = move.garbage || 0;\r\n            if (highestTile(newBoard) - garbage <= 0 || highestGarbageTile(newBoard) - garbage <= 20) {\r\n                board.lost = true;\r\n                garbage = highestTile(newBoard);\r\n            }\r\n\r\n            const rng = generator(`${newBoard.srng}-garbage-${garbage}-${newBoard.garbagePool}`);\r\n            newBoard.garbagePool += garbage;\r\n\r\n            const noGarbageIndex = Math.floor(rng() * 10);\r\n\r\n            const preTiles = newBoard.tiles.slice(10 * (garbage));\r\n            const postTiles = new Array(garbage * 10)\r\n                .fill(Piece.Empty)\r\n                .map((_, i) => i % 10 === noGarbageIndex ? Piece.Empty : Piece.Garbage);\r\n\r\n            newBoard.tiles = [...preTiles, ...postTiles];\r\n\r\n            break;\r\n    }\r\n\r\n    if (newBoard.bag.length < 7) {\r\n        newBoard.bag = newBoard.bag.concat(createNewBag(newBoard.srng, newBoard.bagPool, generator));\r\n        newBoard.bagPool++;\r\n    }\r\n\r\n    const lines: Array<Array<number>> = [];\r\n    let clears = 0;\r\n\r\n    for (let i = 0; i < 40; i++) {\r\n        const line = newBoard.tiles.slice(i * 10, (i + 1) * 10);\r\n        const cleared = line.every(tile => tile !== Piece.Empty);\r\n            \r\n        if (cleared) {\r\n\r\n            if (rules.resendGarbage) {\r\n                clears += 1;\r\n            } else if (line.every(tile => tile !== Piece.Garbage)) {\r\n                clears += 1;\r\n            }\r\n            \r\n        } else {\r\n            lines.push(line);\r\n        }\r\n    }\r\n\r\n    newBoard.clears = clears;\r\n    let tSpin = false;\r\n\r\n    newBoard.lines += newBoard.clears;\r\n\r\n    if (newBoard.clears > 0) {\r\n        if (board.finishingMoves >= 0) {\r\n            newBoard.finishingMoves += newBoard.clears;\r\n        }\r\n        let j = 0;\r\n        for (let i = 0; i < newBoard.clears; i++) {\r\n            \r\n            if (newBoard.garbageQueue.length <= 0) {\r\n                break;\r\n            }\r\n\r\n            j += 1;\r\n            const garbage = newBoard.garbageQueue.shift();\r\n\r\n            garbage.amount -= 1;\r\n            if (garbage.amount > 0) {\r\n                newBoard.garbageQueue.unshift(garbage);\r\n            }\r\n        }\r\n        newBoard.clears -= j;\r\n\r\n        if (rules.garbageDefense) {\r\n            for (let garbage of newBoard.garbageQueue) {\r\n                garbage.turns += 1;\r\n            }\r\n        }\r\n\r\n        if (newBoard.clears > 0 && usedPiece === Piece.T && submoveState.dropLines === 0) {\r\n            const submoves = move.submoves || [];\r\n            const lastMove = [...submoves].reverse().find(submove => submove !== Direction.Down && submove !== Direction.Drop);\r\n            if (lastMove === Direction.RotateLeft || lastMove === Direction.RotateRight) {\r\n                \r\n                function check(x, y) {\r\n                    return x < 0 || x >= 10 || y < 0 || y >= 40 || newBoard.tiles[y * 10 + x] !== Piece.Empty;\r\n                }\r\n\r\n                const piece = rotateArray(T_CHECK, submoveState.pieceRotation);\r\n\r\n                let corners = 0;\r\n\r\n                for (let i = 0; i < piece.length; i++) {\r\n                    for (let j = 0; j < piece[i].length; j++) {\r\n                        if (piece[i][j] === 1) {\r\n                            if (check(submoveState.pieceX + j, submoveState.pieceY + i)) {\r\n                                corners += 1;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (corners >= 3) {\r\n                    tSpin = true;\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    const newTiles = new Array(400).fill(Piece.Empty);\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n        newTiles.splice((i + (40 - lines.length)) * 10, 10, ...lines[i]);\r\n    }\r\n\r\n    newBoard.tiles = newTiles;\r\n\r\n    if (!ignoreGarbage && move.type === MoveType.Move) {\r\n\r\n        for (let i = 0; i < newBoard.garbageQueue.length; i++) {\r\n            const garbage = newBoard.garbageQueue[i];\r\n            garbage.turns -= 1;\r\n\r\n            if (garbage.turns <= 0) {\r\n                newBoard.lastDamager = garbage.player;\r\n                newBoard = makeMove({ type: MoveType.AddGarbage, garbage: garbage.amount}, newBoard, generator, rules, true);\r\n            }\r\n        }\r\n            \r\n        newBoard.garbageQueue = newBoard.garbageQueue.filter(garbage => garbage.turns > 0);\r\n    }\r\n\r\n    const newLayout = PIECES[newBoard.bag[0]].layout;\r\n\r\n    for (let i = 0; i < newLayout.length; i++) {\r\n        for (let j = 0; j < newLayout[i].length; j++) {\r\n            if (newLayout[i][j] === 1) {\r\n                const index = (i + 16) * 10 + (j + 3);\r\n                if (newBoard.tiles[index] !== Piece.Empty) {\r\n                    newBoard.lost = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (move.type === MoveType.Move) {\r\n        if (newBoard.clears <= 0) {\r\n            if (newBoard.combo.length >= 2) {\r\n                if (!rules.forgivingCombos || newBoard.combo.substring(newBoard.combo.length - 2) === '00') {\r\n                    if (newBoard.finishingMoves < 0) { \r\n                        newBoard.combo = '';\r\n                    }\r\n                } else {\r\n                    newBoard.combo += '00';\r\n                }\r\n            }\r\n        } else {\r\n            newBoard.combo += newBoard.clears + (tSpin ? 't' : 'l');\r\n    \r\n            if (newTiles.every(tile => tile === Piece.Empty)) {\r\n                newBoard.combo += 'fc';\r\n            }\r\n\r\n            const combos = getCombos(newBoard.combo);\r\n            const lastCombo = combos[combos.length - 1];\r\n\r\n            if (lastCombo.juice.type === 'multiply') {\r\n                let totalJuice = 0;\r\n                for (let combo of combos) {\r\n                    if (combo.juice.type === 'multiply') {\r\n                        continue;\r\n                    }\r\n                    totalJuice += combo.juice.count;\r\n                }\r\n                newBoard.juice += totalJuice;\r\n            } else {\r\n                newBoard.juice += lastCombo.juice.count;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (newBoard.finishingMoves < 0 && board.finishingMoves >= 0) {\r\n        newBoard.lost = true;\r\n    }\r\n\r\n    return newBoard;\r\n\r\n}\r\n\r\nfunction mod(n, m) {\r\n    return ((n % m) + m) % m;\r\n}"],"names":["PIECES","layout","color","COMBOS","name","lines","type","count","juice","fc","T_CHECK","WALL_KICK","WALL_KICK_I","Piece","MoveType","Direction","COMPETITIVE_DEFAULTS","competitive","initialSpeed","resendGarbage","forgivingCombos","garbageTurns","garbageDefense","NORMAL_DEFAULTS","createNewBag","srng","bagIndex","generator","pieces","I","J","L","O","T","Z","S","bag","rng","i","index","Math","floor","length","push","splice","createNewBoard","playerId","matchId","gameId","tiles","Array","fill","Empty","hold","canHold","lost","bagPool","garbagePool","move","combo","lastDamager","garbageQueue","clears","finishingMoves","deepCopyBoard","board","highestTile","highestGarbageTile","Garbage","rotateArray","array","rotation","rot","mod","map","row","_","j","getRotatedPiece","piece","pieceFits","x","y","nx","ny","defaultSubmoveState","pieceX","pieceY","pieceRotation","submoves","lastMoveSuccessful","dropLines","makeSubmove","submove","submoveState","includes","Drop","state","Left","Right","Down","RotateRight","RotateLeft","Rotate180","rotate","wallKickArray","oldRotation","newRotation","wallKick","getJuiceLevel","log","getLevelJuice","level","pow","getCombos","combos","valid","addCombo","longCombo","substring","replace","newCombo","original","max","makeMove","rules","ignoreGarbage","newBoard","usedPiece","Move","over","shift","Hold","AddGarbage","garbage","noGarbageIndex","preTiles","slice","postTiles","concat","i1","line","every","tile","tSpin","j1","i2","garbage1","amount","unshift","garbage2","turns","lastMove","reverse","find","piece1","corners","i3","j2","newTiles","i4","i5","garbage3","player","filter","newLayout","i6","j3","index1","lastCombo","totalJuice","n","m"],"version":3,"file":"index.2b27d19d.js.map"}