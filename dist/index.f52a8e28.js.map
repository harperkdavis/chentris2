{"mappings":"AAAA,MAAM,MAAM,GAAG;IACX;QACI,MAAM,EAAE;YACJ;AAAC,iBAAC;AAAE,iBAAC;AAAE,iBAAC;AAAE,iBAAC;aAAC;YACZ;AAAC,iBAAC;AAAE,iBAAC;AAAE,iBAAC;AAAE,iBAAC;aAAC;YACZ;AAAC,iBAAC;AAAE,iBAAC;AAAE,iBAAC;AAAE,iBAAC;aAAC;YACZ;AAAC,iBAAC;AAAE,iBAAC;AAAE,iBAAC;AAAE,iBAAC;aAAC;SACf;QACD,KAAK,EAAE;AAAC,eAAG;AAAE,eAAG;AAAE,eAAG;SAAC;KACzB;IACD;QACI,MAAM,EAAE;YACJ;AAAC,iBAAC;AAAE,iBAAC;AAAE,iBAAC;aAAC;YACT;AAAC,iBAAC;AAAE,iBAAC;AAAE,iBAAC;aAAC;YACT;AAAC,iBAAC;AAAE,iBAAC;AAAE,iBAAC;aAAC;SACZ;QAAE,KAAK,EAAE;AAAC,eAAG;AAAE,eAAG;AAAE,eAAG;SAAC;KAC5B;IACD;QACI,MAAM,EAAE;YACJ;AAAC,iBAAC;AAAE,iBAAC;AAAE,iBAAC;aAAC;YACT;AAAC,iBAAC;AAAE,iBAAC;AAAE,iBAAC;aAAC;YACT;AAAC,iBAAC;AAAE,iBAAC;AAAE,iBAAC;aAAC;SACZ;QACD,KAAK,EAAE;AAAC,eAAG;AAAE,eAAG;AAAE,eAAG;SAAC;KACzB;IACD;QACI,MAAM,EAAE;YACJ;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,iBAAC;AAAE,iBAAC;aAAC;SACT;QACD,KAAK,EAAE;AAAC,eAAG;AAAE,eAAG;AAAE,eAAG;SAAC;KACzB;IACD;QACI,MAAM,EAAE;YACJ;AAAC,iBAAC;AAAE,iBAAC;AAAE,iBAAC;aAAC;YACT;AAAC,iBAAC;AAAE,iBAAC;AAAE,iBAAC;aAAC;YACT;AAAC,iBAAC;AAAE,iBAAC;AAAE,iBAAC;aAAC;SACZ;QACD,KAAK,EAAE;AAAC,eAAG;AAAE,eAAG;AAAE,eAAG;SAAC;KACzB;IACD;QACI,MAAM,EAAE;YACJ;AAAC,iBAAC;AAAE,iBAAC;AAAE,iBAAC;aAAC;YACT;AAAC,iBAAC;AAAE,iBAAC;AAAE,iBAAC;aAAC;YACT;AAAC,iBAAC;AAAE,iBAAC;AAAE,iBAAC;aAAC;SACZ;QACD,KAAK,EAAE;AAAC,eAAG;AAAE,eAAG;AAAE,eAAG;SAAC;KACzB;IACD;QACI,MAAM,EAAE;YACJ;AAAC,iBAAC;AAAE,iBAAC;AAAE,iBAAC;aAAC;YACT;AAAC,iBAAC;AAAE,iBAAC;AAAE,iBAAC;aAAC;YACT;AAAC,iBAAC;AAAE,iBAAC;AAAE,iBAAC;aAAC;SACZ;QACD,KAAK,EAAE;AAAC,eAAG;AAAE,eAAG;AAAE,eAAG;SAAC;KACzB;IACD;QACI,MAAM,EAAE;YACJ;AAAC,iBAAC;aAAC;SACN;QACD,KAAK,EAAE;AAAC,eAAG;AAAE,eAAG;AAAE,eAAG;SAAC;KACzB;CACJ,AAAC;AAEF,MAAM,SAAS,GAAG;AACd,IAAA,CAAC,EAAE;AACC,QAAA,CAAC,EAAE;YACC;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,iBAAC;AAAE,kBAAE;aAAC;YACP;AAAC,iBAAC;AAAE,kBAAE;aAAC;SACV;AACD,QAAA,CAAC,EAAE;YACC;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,kBAAE;AAAE,iBAAC;aAAC;YACP;AAAC,kBAAE;AAAE,iBAAC;aAAC;YACP;AAAC,iBAAC;AAAE,kBAAE;aAAC;YACP;AAAC,kBAAE;AAAE,kBAAE;aAAC;SACX;KACJ;AACD,IAAA,CAAC,EAAE;AACC,QAAA,CAAC,EAAE;YACC;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,iBAAC;AAAE,kBAAE;aAAC;YACP;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,iBAAC;AAAE,iBAAC;aAAC;SACT;AACD,QAAA,CAAC,EAAE;YACC;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,iBAAC;AAAE,kBAAE;aAAC;YACP;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,iBAAC;AAAE,iBAAC;aAAC;SACT;KACJ;AACD,IAAA,CAAC,EAAE;AACC,QAAA,CAAC,EAAE;YACC;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,kBAAE;AAAE,iBAAC;aAAC;YACP;AAAC,kBAAE;AAAE,iBAAC;aAAC;YACP;AAAC,iBAAC;AAAE,kBAAE;aAAC;YACP;AAAC,kBAAE;AAAE,kBAAE;aAAC;SACX;AACD,QAAA,CAAC,EAAE;YACC;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,iBAAC;AAAE,kBAAE;aAAC;YACP;AAAC,iBAAC;AAAE,kBAAE;aAAC;SACV;KACJ;AACD,IAAA,CAAC,EAAE;AACC,QAAA,CAAC,EAAE;YACC;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,kBAAE;AAAE,iBAAC;aAAC;YACP;AAAC,kBAAE;AAAE,kBAAE;aAAC;YACR;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,kBAAE;AAAE,iBAAC;aAAC;SACV;AACD,QAAA,CAAC,EAAE;YACC;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,kBAAE;AAAE,iBAAC;aAAC;YACP;AAAC,kBAAE;AAAE,kBAAE;aAAC;YACR;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,kBAAE;AAAE,iBAAC;aAAC;SACV;KACJ;CACJ;AAED,MAAM,WAAW,GAAG;AAChB,IAAA,CAAC,EAAE;AACC,QAAA,CAAC,EAAE;YACC;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,kBAAE;AAAE,iBAAC;aAAC;YACP;AAAC,kBAAE;AAAE,iBAAC;aAAC;YACP;AAAC,iBAAC;AAAE,kBAAE;aAAC;SACV;AACD,QAAA,CAAC,EAAE;YACC;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,kBAAE;AAAE,iBAAC;aAAC;YACP;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,kBAAE;AAAE,kBAAE;aAAC;SACX;KACJ;AACD,IAAA,CAAC,EAAE;AACC,QAAA,CAAC,EAAE;YACC;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,kBAAE;AAAE,iBAAC;aAAC;YACP;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,kBAAE;AAAE,kBAAE;aAAC;SACX;AACD,QAAA,CAAC,EAAE;YACC;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,kBAAE;AAAE,iBAAC;aAAC;YACP;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,kBAAE;AAAE,iBAAC;aAAC;YACP;AAAC,iBAAC;AAAE,kBAAE;aAAC;SACV;KACJ;AACD,IAAA,CAAC,EAAE;AACC,QAAA,CAAC,EAAE;YACC;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,kBAAE;AAAE,iBAAC;aAAC;YACP;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,kBAAE;AAAE,iBAAC;aAAC;YACP;AAAC,iBAAC;AAAE,kBAAE;aAAC;SACV;AACD,QAAA,CAAC,EAAE;YACC;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,kBAAE;AAAE,iBAAC;aAAC;YACP;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,kBAAE;AAAE,kBAAE;aAAC;SACX;KACJ;AACD,IAAA,CAAC,EAAE;AACC,QAAA,CAAC,EAAE;YACC;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,kBAAE;AAAE,iBAAC;aAAC;YACP;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,kBAAE;AAAE,kBAAE;aAAC;SACX;AACD,QAAA,CAAC,EAAE;YACC;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,kBAAE;AAAE,iBAAC;aAAC;YACP;AAAC,iBAAC;AAAE,iBAAC;aAAC;YACN;AAAC,kBAAE;AAAE,iBAAC;aAAC;YACP;AAAC,iBAAC;AAAE,kBAAE;aAAC;SACV;KACJ;CACJ;IA8BD,KAUC;UAVI,KAAK;IAAL,KAAK,CAAL,KAAK,CACN,OAAK,IAAL,EAAK,IAAL,OAAK;IADJ,KAAK,CAAL,KAAK,CAEN,GAAC,IAAG,CAAC,IAAL,GAAC;IAFA,KAAK,CAAL,KAAK,CAGN,GAAC,IAAG,CAAC,IAAL,GAAC;IAHA,KAAK,CAAL,KAAK,CAIN,GAAC,IAAG,CAAC,IAAL,GAAC;IAJA,KAAK,CAAL,KAAK,CAKN,GAAC,IAAG,CAAC,IAAL,GAAC;IALA,KAAK,CAAL,KAAK,CAMN,GAAC,IAAG,CAAC,IAAL,GAAC;IANA,KAAK,CAAL,KAAK,CAON,GAAC,IAAG,CAAC,IAAL,GAAC;IAPA,KAAK,CAAL,KAAK,CAQN,GAAC,IAAG,CAAC,IAAL,GAAC;IARA,KAAK,CAAL,KAAK,CASN,SAAO,IAAG,CAAC,IAAX,SAAO;GATN,KAAK,KAAL,KAAK;IAYV,QAIC;UAJI,QAAQ;IAAR,QAAQ,CACT,MAAI,IAAG,MAAM;IADZ,QAAQ,CAET,MAAI,IAAG,MAAM;IAFZ,QAAQ,CAGT,YAAU,IAAG,YAAY;GAHxB,QAAQ,KAAR,QAAQ;IAMb,SAUC;UAVI,SAAS;IAAT,SAAS,CACV,MAAI,IAAG,MAAM;IADZ,SAAS,CAEV,OAAK,IAAG,OAAO;IAFd,SAAS,CAIV,MAAI,IAAG,MAAM;IAJZ,SAAS,CAKV,MAAI,IAAG,MAAM;IALZ,SAAS,CAOV,aAAW,IAAG,aAAa;IAP1B,SAAS,CAQV,YAAU,IAAG,YAAY;IARxB,SAAS,CASV,WAAS,IAAG,WAAW;GATtB,SAAS,KAAT,SAAS;AAYd,SAAS,YAAY,CAAC,IAAY,EAAE,QAAgB,EAAE,SAAmB,EAAgB;IACrF,IAAI,MAAM,GAAG;QAAC,KAAK,CAAC,CAAC;QAAE,KAAK,CAAC,CAAC;QAAE,KAAK,CAAC,CAAC;QAAE,KAAK,CAAC,CAAC;QAAE,KAAK,CAAC,CAAC;QAAE,KAAK,CAAC,CAAC;QAAE,KAAK,CAAC,CAAC;KAAC,AAAC;IAE7E,MAAM,GAAG,GAAG,EAAE,AAAC;IACf,MAAM,GAAG,GAAG,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,AAAC;IAEjD,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAE;QACxB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,AAAC;QAEhD,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;KAC3B;IAED,OAAO,GAAG,CAAC;CACd;AAED,SAAS,cAAc,CAAC,QAAgB,EAAE,OAAe,EAAE,MAAc,EAAE,SAAmB,EAAS;IACnG,MAAM,IAAI,GAAG,CAAC,EAAE,QAAQ,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,AAAC;IAChD,OAAO;QACH,IAAI;QAEJ,KAAK,EAAE,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QACvC,GAAG,EAAE,YAAY,CAAC,IAAI,EAAE,CAAC,EAAE,SAAS,CAAC;QAErC,IAAI,EAAE,KAAK,CAAC,KAAK;QACjB,OAAO,EAAE,IAAI;QAEb,IAAI,EAAE,KAAK;QAEX,OAAO,EAAE,CAAC;QACV,WAAW,EAAE,CAAC;KACjB,CAAC;CACL;AAED,SAAS,aAAa,CAAC,KAAY,EAAS;IACxC,OAAO;QACH,IAAI,EAAE,KAAK,CAAC,IAAI;QAEhB,KAAK,EAAE;eAAI,KAAK,CAAC,KAAK;SAAC;QACvB,GAAG,EAAE;eAAI,KAAK,CAAC,GAAG;SAAC;QAEnB,IAAI,EAAE,KAAK,CAAC,IAAI;QAChB,OAAO,EAAE,KAAK,CAAC,OAAO;QAEtB,IAAI,EAAE,KAAK,CAAC,IAAI;QAEhB,OAAO,EAAE,KAAK,CAAC,OAAO;QACtB,WAAW,EAAE,KAAK,CAAC,WAAW;KACjC,CAAC;CACL;AAED,SAAS,WAAW,CAAC,KAAY,EAAU;IACvC,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,CAAE;QAC1B,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,KAAK,EAC9B,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;KAEjC;IACD,OAAO,EAAE,CAAC;CACb;AAED,SAAS,kBAAkB,CAAC,KAAY,EAAU;IAC9C,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,CAAE;QAC1B,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,OAAO,EAChC,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;KAEjC;IACD,OAAO,EAAE,CAAC;CACb;AAED,SAAS,eAAe,CAAC,KAAY,EAAE,QAAgB,EAAwB;IAC3E,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,AAAC;IACpC,MAAM,GAAG,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,AAAC;IAE7B,IAAI,GAAG,IAAI,CAAC,EACR,OAAO,MAAM,CAAC,GAAG,CAAC,CAAA,GAAG,GAAI;eAAI,GAAG;SAAC,CAAC,CAAC;SAChC,IAAI,GAAG,KAAK,CAAC,EAChB,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAK,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAK,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAChF,IAAI,GAAG,KAAK,CAAC,EAChB,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAK,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAK,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;SACpG,IAAI,GAAG,IAAI,CAAC,EACf,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAK,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAK,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;CAG1F;AAED,SAAS,SAAS,CAAC,KAAY,EAAE,KAAY,EAAE,CAAS,EAAE,CAAS,EAAE,QAAgB,EAAW;IAC5F,MAAM,MAAM,GAAG,eAAe,CAAC,KAAK,EAAE,QAAQ,CAAC,AAAC;IAEhD,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;QACpC,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,CAErC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;YACpB,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,AAAC;YAC7B,MAAM,KAAK,GAAG,AAAC,EAAE,GAAI,EAAE,GAAG,EAAE,AAAC;YAE7B,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,EACxC,OAAO,KAAK,CAAC;YAEjB,IAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC,KAAK,EAC7E,OAAO,KAAK,CAAC;SAEpB;KAGR;IAED,OAAO,IAAI,CAAC;CACf;AAED,SAAS,mBAAmB,GAAiB;IACzC,OAAO;QACH,MAAM,EAAE,CAAC;QACT,MAAM,EAAE,CAAC;QACT,aAAa,EAAE,CAAC;QAChB,QAAQ,EAAE,EAAE;KACf,CAAC;CACL;AAED,SAAS,WAAW,CAAC,OAAkB,EAAE,KAAY,EAAE,YAA0B,EAAgB;IAE7F,IAAI,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,EAC9C,OAAO,YAAY,CAAC;IAGxB,MAAM,KAAK,GAAiB;QACxB,MAAM,EAAE,YAAY,CAAC,MAAM;QAC3B,MAAM,EAAE,YAAY,CAAC,MAAM;QAC3B,aAAa,EAAE,YAAY,CAAC,aAAa;QACzC,QAAQ,EAAE;eAAI,YAAY,CAAC,QAAQ;SAAC;KACvC,AAAC;IAEF,IAAI,OAAO,KAAK,SAAS,CAAC,IAAI,EAC1B;QAAA,IAAI,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,aAAa,CAAC,EAAE;YACrF,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC;YAClB,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACvC;KAAA,MACE,IAAI,OAAO,KAAK,SAAS,CAAC,KAAK,EAClC;QAAA,IAAI,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,aAAa,CAAC,EAAE;YACrF,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC;YAClB,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SACxC;KAAA,MACE,IAAI,OAAO,KAAK,SAAS,CAAC,IAAI,EACjC;QAAA,IAAI,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,EAAE;YACrF,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC;YAClB,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACvC;KAAA,MACE,IAAI,OAAO,KAAK,SAAS,CAAC,IAAI,EAAE;QACnC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACpC,MAAO,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,CACtF,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC;KAEzB,MAAM,IAAI,OAAO,KAAK,SAAS,CAAC,WAAW,IAAI,OAAO,KAAK,SAAS,CAAC,UAAU,EAC5E;QAAA,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,EAAE;YAE1B,MAAM,MAAM,GAAG,OAAO,KAAK,SAAS,CAAC,WAAW,GAAG,CAAC,GAAG,EAAE,AAAC;YAC1D,MAAM,aAAa,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,GAAG,WAAW,GAAG,SAAS,AAAC;YAExE,MAAM,WAAW,GAAG,KAAK,CAAC,aAAa,AAAC;YACxC,MAAM,WAAW,GAAG,GAAG,CAAE,KAAK,CAAC,aAAa,GAAG,MAAM,EAAG,CAAC,CAAC,AAAC;YAE3D,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAE;gBACxB,MAAM,QAAQ,GAAG,aAAa,CAAC,WAAW,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,AAAC;gBAC5D,IAAI,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,EAAE;oBACrG,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAC1C,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAC1C,KAAK,CAAC,aAAa,GAAG,WAAW,CAAC;oBAClC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAC7B,MAAM;iBACT;aACJ;SAEJ;KAAA,MACkB,SAAS,CAAC,SAAS,CAEzC;IAED,OAAO,KAAK,CAAC;CAChB;AAED,SAAS,QAAQ,CAAC,IAAU,EAAE,KAAY,EAAE,SAAmB,EAAS;IAEpE,IAAI,KAAK,CAAC,IAAI,EACV,OAAO,KAAK,CAAC;IAGjB,MAAM,QAAQ,GAAG,aAAa,CAAC,KAAK,CAAC,AAAC;IAEtC,OAAQ,IAAI,CAAC,IAAI;QACb,KAAK,QAAQ,CAAC,IAAI;YACd,IAAI,YAAY,GAAG,mBAAmB,EAAE,AAAC;YAEzC,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,CAC/B,YAAY,GAAG,WAAW,CAAC,OAAO,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;YAGhE,MAAM,KAAK,GAAG,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,aAAa,CAAC,AAAC;YAC3E,IAAI,IAAI,GAAG,IAAI,AAAC;YAEhB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;gBACnC,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,CACpC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;oBACnB,MAAM,KAAK,GAAG,AAAC,CAAA,YAAY,CAAC,MAAM,GAAG,CAAC,CAAA,GAAI,EAAE,GAAG,YAAY,CAAC,MAAM,GAAG,CAAC,AAAC;oBACvE,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACxC,IAAI,KAAK,IAAI,EAAE,EACX,IAAI,GAAG,KAAK,CAAC;iBAEpB;aAER;YAED,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;YACrB,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC;YAExB,IAAI,IAAI,EACJ,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;YAGzB,MAAM;QACV,KAAK,QAAQ,CAAC,IAAI;YACd,IAAI,QAAQ,CAAC,OAAO,EAAE;gBAClB,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,AAAC;gBAC3B,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAChC,QAAQ,CAAC,OAAO,GAAG,KAAK,CAAC;gBACzB,IAAI,IAAI,KAAK,KAAK,CAAC,KAAK,EACpB,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;qBAEvB,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;aAE5B;YACD,MAAM;QACV,KAAK,QAAQ,CAAC,UAAU;YACpB,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,AAAC;YAC3B,IAAI,WAAW,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,kBAAkB,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,OAAO,IAAI,CAAC,EAAE;gBAC9F,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;gBAClB,OAAO,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC;aACnC;YAED,MAAM,GAAG,GAAG,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,EAAE,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,AAAC;YACrF,QAAQ,CAAC,WAAW,IAAI,OAAO,CAAC;YAEhC,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,AAAC;YAE9C,MAAM,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,GAAI,OAAO,AAAC,CAAC,AAAC;YACtD,MAAM,SAAS,GAAG,IAAI,KAAK,CAAC,OAAO,GAAG,EAAE,CAAC,CACpC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CACjB,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAK,CAAC,GAAG,EAAE,KAAK,cAAc,GAAG,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,AAAC;YAE5E,QAAQ,CAAC,KAAK,GAAG;mBAAI,QAAQ;mBAAK,SAAS;aAAC,CAAC;YAE7C,MAAM;KACb;IAED,IAAI,QAAQ,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;QACzB,QAAQ,CAAC,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC;QAC7F,QAAQ,CAAC,OAAO,EAAE,CAAC;KACtB;IAED,MAAM,KAAK,GAAG,EAAE,AAAC;IACjB,IAAI,MAAM,GAAG,CAAC,AAAC;IAEf,IAAK,IAAI,EAAC,GAAG,CAAC,EAAE,EAAC,GAAG,EAAE,EAAE,EAAC,EAAE,CAAE;QACzB,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,EAAC,GAAG,EAAE,EAAE,AAAC,CAAA,EAAC,GAAG,CAAC,CAAA,GAAI,EAAE,CAAC,AAAC;QACxD,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAA,IAAI,GAAI,IAAI,KAAK,KAAK,CAAC,KAAK,CAAC,AAAC;QAEzD,IAAI,OAAO,EACP,MAAM,EAAE,CAAC;aAET,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAExB;IAED,MAAM,QAAQ,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,AAAC;IAElD,IAAK,IAAI,EAAC,GAAG,CAAC,EAAE,EAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAC,EAAE,CACjC,QAAQ,CAAC,MAAM,CAAC,AAAC,CAAA,EAAC,GAAI,CAAA,EAAE,GAAG,KAAK,CAAC,MAAM,CAAA,AAAC,CAAA,GAAI,EAAE,EAAE,EAAE,KAAK,KAAK,CAAC,EAAC,CAAC,CAAC,CAAC;IAGrE,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC;IAE1B,OAAO,QAAQ,CAAC;CAEnB;AAED,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE;IACf,OAAO,AAAC,CAAA,AAAC,CAAC,GAAG,CAAC,GAAI,CAAC,CAAA,GAAI,CAAC,CAAC;CAC5B","sources":["src/tetris.ts"],"sourcesContent":["const PIECES = [\r\n    {\r\n        layout: [ // I-piece 0\r\n            [0, 0, 0, 0],\r\n            [1, 1, 1, 1],\r\n            [0, 0, 0, 0],\r\n            [0, 0, 0, 0]\r\n        ], \r\n        color: [130, 250, 230]\r\n    },\r\n    {\r\n        layout: [ // J-piece 1\r\n            [1, 0, 0],\r\n            [1, 1, 1],\r\n            [0, 0, 0]\r\n        ], color: [130, 150, 250]\r\n    },\r\n    {\r\n        layout: [ // L-piece 2\r\n            [0, 0, 1],\r\n            [1, 1, 1],\r\n            [0, 0, 0]\r\n        ], \r\n        color: [240, 160, 110]\r\n    },\r\n    {\r\n        layout: [ // O-piece 3\r\n            [1, 1],\r\n            [1, 1]\r\n        ], \r\n        color: [240, 230, 110]\r\n    },\r\n    {\r\n        layout: [ // T-piece 4\r\n            [0, 1, 0],\r\n            [1, 1, 1],\r\n            [0, 0, 0]\r\n        ], \r\n        color: [180, 130, 240]\r\n    },\r\n    {\r\n        layout: [ // Z-piece 5\r\n            [1, 1, 0],\r\n            [0, 1, 1],\r\n            [0, 0, 0]\r\n        ], \r\n        color: [240, 130, 150]\r\n    },\r\n    {\r\n        layout: [ // S-piece 6\r\n            [0, 1, 1],\r\n            [1, 1, 0],\r\n            [0, 0, 0]\r\n        ], \r\n        color: [130, 240, 120]\r\n    },\r\n    {\r\n        layout: [ // Garbage 7 (Not intended to be used)\r\n            [1]\r\n        ],\r\n        color: [200, 200, 200],\r\n    }\r\n];\r\n\r\nconst WALL_KICK = {\r\n    0: {\r\n        3: [\r\n            [0, 0],\r\n            [1, 0],\r\n            [1, 1],\r\n            [0, -2],\r\n            [1, -2],\r\n        ],\r\n        1: [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [-1, 1],\r\n            [0, -2],\r\n            [-1, -2],\r\n        ],\r\n    },\r\n    1: {\r\n        0: [\r\n            [0, 0],\r\n            [1, 0],\r\n            [1, -1],\r\n            [0, 2],\r\n            [1, 2],\r\n        ],\r\n        2: [\r\n            [0, 0],\r\n            [1, 0],\r\n            [1, -1],\r\n            [0, 2],\r\n            [1, 2],\r\n        ],\r\n    },\r\n    2: {\r\n        1: [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [-1, 1],\r\n            [0, -2],\r\n            [-1, -2],\r\n        ],\r\n        3: [\r\n            [0, 0],\r\n            [1, 0],\r\n            [1, 1],\r\n            [0, -2],\r\n            [1, -2],\r\n        ],\r\n    },\r\n    3: {\r\n        2: [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [-1, -1],\r\n            [0, 2],\r\n            [-1, 2],\r\n        ],\r\n        0: [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [-1, -1],\r\n            [0, 2],\r\n            [-1, 2],\r\n        ],\r\n    }\r\n}\r\n  \r\nconst WALL_KICK_I = {\r\n    0: {\r\n        3: [\r\n            [0, 0],\r\n            [2, 0],\r\n            [-1, 0],\r\n            [-1, 2],\r\n            [2, -1],\r\n        ],\r\n        1: [\r\n            [0, 0],\r\n            [-2, 0],\r\n            [1, 0],\r\n            [1, 2],\r\n            [-2, -1],\r\n        ],\r\n    },\r\n    1: {\r\n        0: [\r\n            [0, 0],\r\n            [2, 0],\r\n            [-1, 0],\r\n            [2, 1],\r\n            [-1, -2],\r\n        ],\r\n        2: [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [2, 0],\r\n            [-1, 2],\r\n            [2, -1],\r\n        ],\r\n    },\r\n    2: {\r\n        1: [\r\n            [0, 0],\r\n            [-2, 0],\r\n            [1, 0],\r\n            [-2, 1],\r\n            [1, -1],\r\n        ],\r\n        3: [\r\n            [0, 0],\r\n            [2, 0],\r\n            [-1, 0],\r\n            [2, 1],\r\n            [-1, -1],\r\n        ],\r\n    },\r\n    3: {\r\n        2: [\r\n            [0, 0],\r\n            [1, 0],\r\n            [-2, 0],\r\n            [1, 2],\r\n            [-2, -1],\r\n        ],\r\n        0: [\r\n            [0, 0],\r\n            [-2, 0],\r\n            [1, 0],\r\n            [-2, 1],\r\n            [1, -2],\r\n        ],\r\n    }\r\n}\r\n\r\ninterface Board {\r\n    srng: string,\r\n\r\n    tiles: Array<number>,\r\n    bag: Array<Piece>,\r\n\r\n    hold: Piece,\r\n    canHold: boolean,\r\n\r\n    lost: boolean,\r\n\r\n    bagPool: number,\r\n    garbagePool: number,\r\n};\r\n\r\ninterface Move {\r\n    type: MoveType,\r\n    submoves?: Array<Direction>,\r\n    garbage?: number,\r\n};\r\n\r\ninterface SubmoveState {\r\n    pieceX: number,\r\n    pieceY: number,\r\n    pieceRotation: number,\r\n    submoves: Array<Direction>,\r\n}\r\n\r\nenum Piece {\r\n    Empty = -1,\r\n    I = 0,\r\n    J = 1,\r\n    L = 2,\r\n    O = 3,\r\n    T = 4,\r\n    Z = 5,\r\n    S = 6,\r\n    Garbage = 7,\r\n};\r\n\r\nenum MoveType {\r\n    Move = \"move\",\r\n    Hold = \"hold\",\r\n    AddGarbage = \"addGarbage\",\r\n};\r\n\r\nenum Direction {\r\n    Left = \"left\",\r\n    Right = \"right\",\r\n\r\n    Down = \"down\",\r\n    Drop = \"drop\",\r\n\r\n    RotateRight = \"rotateRight\",\r\n    RotateLeft = \"rotateLeft\",\r\n    Rotate180 = \"rotate180\",\r\n};\r\n\r\nfunction createNewBag(srng: string, bagIndex: number, generator: Function): Array<Piece> {\r\n    let pieces = [Piece.I, Piece.J, Piece.L, Piece.O, Piece.T, Piece.Z, Piece.S];\r\n\r\n    const bag = [];\r\n    const rng = generator(`${srng}-bag-${bagIndex}`);\r\n\r\n    for (let i = 0; i < 7; i++) {\r\n        const index = Math.floor(rng() * pieces.length);\r\n\r\n        bag.push(pieces[index]);\r\n        pieces.splice(index, 1);\r\n    };\r\n\r\n    return bag;\r\n}\r\n\r\nfunction createNewBoard(playerId: string, matchId: string, gameId: string, generator: Function): Board {\r\n    const srng = `${playerId}-${matchId}-${gameId}`;\r\n    return {\r\n        srng,\r\n\r\n        tiles: new Array(240).fill(Piece.Empty),\r\n        bag: createNewBag(srng, 0, generator),\r\n\r\n        hold: Piece.Empty,\r\n        canHold: true,\r\n\r\n        lost: false,\r\n\r\n        bagPool: 0,\r\n        garbagePool: 0,\r\n    };\r\n}\r\n\r\nfunction deepCopyBoard(board: Board): Board {\r\n    return {\r\n        srng: board.srng,\r\n\r\n        tiles: [...board.tiles],\r\n        bag: [...board.bag],\r\n\r\n        hold: board.hold,\r\n        canHold: board.canHold,\r\n\r\n        lost: board.lost,\r\n\r\n        bagPool: board.bagPool,\r\n        garbagePool: board.garbagePool,\r\n    };\r\n}\r\n\r\nfunction highestTile(board: Board): number {\r\n    for (let i = 0; i < 240; i++) {\r\n        if (board.tiles[i] !== Piece.Empty) {\r\n            return Math.floor(i / 10);\r\n        }\r\n    }\r\n    return 24;\r\n}\r\n\r\nfunction highestGarbageTile(board: Board): number {\r\n    for (let i = 0; i < 240; i++) {\r\n        if (board.tiles[i] === Piece.Garbage) {\r\n            return Math.floor(i / 10);\r\n        }\r\n    }\r\n    return 24;\r\n}\r\n\r\nfunction getRotatedPiece(piece: Piece, rotation: number): Array<Array<number>> {\r\n    const layout = PIECES[piece].layout;\r\n    const rot = mod(rotation, 4);\r\n\r\n    if (rot <= 0) {\r\n        return layout.map(row => [...row]);\r\n    } else if (rot === 1) {\r\n        return layout.map((row, i) => row.map((_, j) => layout[layout.length - j - 1][i]));\r\n    } else if (rot === 2) {\r\n        return layout.map((row, i) => row.map((_, j) => layout[layout.length - i - 1][layout.length - j - 1]));\r\n    } else if (rot >= 3) {\r\n        return layout.map((row, i) => row.map((_, j) => layout[j][layout.length - i - 1]));\r\n    } \r\n    \r\n}\r\n\r\nfunction pieceFits(piece: Piece, board: Board, x: number, y: number, rotation: number): boolean {\r\n    const layout = getRotatedPiece(piece, rotation);\r\n\r\n    for (let i = 0; i < layout.length; i++) {\r\n        for (let j = 0; j < layout[i].length; j++) {\r\n\r\n            if (layout[i][j] === 1) {\r\n                const nx = x + j, ny = y + i;\r\n                const index = (ny) * 10 + nx;\r\n\r\n                if (nx < 0 || nx >= 10 || ny < 0 || ny >= 24) {\r\n                    return false;\r\n                }\r\n                if (index > board.tiles.length || index < 0 || board.tiles[index] !== Piece.Empty) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction defaultSubmoveState(): SubmoveState {\r\n    return {\r\n        pieceX: 3,\r\n        pieceY: 0,\r\n        pieceRotation: 0,\r\n        submoves: [],\r\n    };\r\n}\r\n\r\nfunction makeSubmove(submove: Direction, board: Board, submoveState: SubmoveState): SubmoveState {\r\n\r\n    if (submoveState.submoves.includes(Direction.Drop)) {\r\n        return submoveState;\r\n    }\r\n    \r\n    const state: SubmoveState = {\r\n        pieceX: submoveState.pieceX,\r\n        pieceY: submoveState.pieceY,\r\n        pieceRotation: submoveState.pieceRotation,\r\n        submoves: [...submoveState.submoves],\r\n    };\r\n\r\n    if (submove === Direction.Left) {\r\n        if (pieceFits(board.bag[0], board, state.pieceX - 1, state.pieceY, state.pieceRotation)) {\r\n            state.pieceX -= 1;\r\n            state.submoves.push(Direction.Left);\r\n        }\r\n    } else if (submove === Direction.Right) {\r\n        if (pieceFits(board.bag[0], board, state.pieceX + 1, state.pieceY, state.pieceRotation)) {\r\n            state.pieceX += 1;\r\n            state.submoves.push(Direction.Right);\r\n        }\r\n    } else if (submove === Direction.Down) {\r\n        if (pieceFits(board.bag[0], board, state.pieceX, state.pieceY + 1, state.pieceRotation)) {\r\n            state.pieceY += 1;\r\n            state.submoves.push(Direction.Down);\r\n        }\r\n    } else if (submove === Direction.Drop) {\r\n        state.submoves.push(Direction.Drop);\r\n        while (pieceFits(board.bag[0], board, state.pieceX, state.pieceY + 1, state.pieceRotation)) {\r\n            state.pieceY += 1;\r\n        }\r\n    } else if (submove === Direction.RotateRight || submove === Direction.RotateLeft) {\r\n        if (board.bag[0] !== Piece.O) {\r\n\r\n            const rotate = submove === Direction.RotateRight ? 1 : -1;\r\n            const wallKickArray = board.bag[0] == Piece.I ? WALL_KICK_I : WALL_KICK;\r\n\r\n            const oldRotation = state.pieceRotation;\r\n            const newRotation = mod((state.pieceRotation + rotate), 4);\r\n\r\n            for (let i = 0; i < 5; i++) {\r\n                const wallKick = wallKickArray[oldRotation][newRotation][i];\r\n                if (pieceFits(board.bag[0], board, state.pieceX + wallKick[0], state.pieceY - wallKick[1], newRotation)) {\r\n                    state.pieceX = state.pieceX + wallKick[0];\r\n                    state.pieceY = state.pieceY - wallKick[1];\r\n                    state.pieceRotation = newRotation;\r\n                    state.submoves.push(submove);\r\n                    break;\r\n                }\r\n            }\r\n            \r\n        }\r\n    } else if (submove === Direction.Rotate180) {\r\n        // todo!()\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nfunction makeMove(move: Move, board: Board, generator: Function): Board {\r\n\r\n    if (board.lost) {\r\n        return board;\r\n    }\r\n    \r\n    const newBoard = deepCopyBoard(board);\r\n\r\n    switch (move.type) {\r\n        case MoveType.Move:\r\n            let submoveState = defaultSubmoveState();\r\n\r\n            for (const submove of move.submoves) {\r\n                submoveState = makeSubmove(submove, newBoard, submoveState);\r\n            }\r\n\r\n            const piece = getRotatedPiece(newBoard.bag[0], submoveState.pieceRotation);\r\n            let over = true;\r\n\r\n            for (let i = 0; i < piece.length; i++) {\r\n                for (let j = 0; j < piece[i].length; j++) {\r\n                    if (piece[i][j] === 1) {\r\n                        const index = (submoveState.pieceY + i) * 10 + submoveState.pieceX + j;\r\n                        newBoard.tiles[index] = newBoard.bag[0];\r\n                        if (index >= 40) {\r\n                            over = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            newBoard.bag.shift();\r\n            newBoard.canHold = true;\r\n\r\n            if (over) {\r\n                newBoard.lost = true;\r\n            }\r\n\r\n            break;\r\n        case MoveType.Hold:\r\n            if (newBoard.canHold) {\r\n                const hold = newBoard.hold;\r\n                newBoard.hold = newBoard.bag[0];\r\n                newBoard.canHold = false;\r\n                if (hold !== Piece.Empty) {\r\n                    newBoard.bag[0] = hold;\r\n                } else {\r\n                    newBoard.bag.shift();\r\n                }\r\n            }\r\n            break;\r\n        case MoveType.AddGarbage:\r\n            let garbage = move.garbage;\r\n            if (highestTile(newBoard) - move.garbage < 2 || highestGarbageTile(newBoard) - move.garbage <= 4) {\r\n                board.lost = true;\r\n                garbage = highestTile(newBoard);\r\n            }\r\n\r\n            const rng = generator(`${newBoard.srng}-garbage-${garbage}-${newBoard.garbagePool}`);\r\n            newBoard.garbagePool += garbage;\r\n\r\n            const noGarbageIndex = Math.floor(rng() * 10);\r\n\r\n            const preTiles = newBoard.tiles.slice(10 * (garbage));\r\n            const postTiles = new Array(garbage * 10)\r\n                .fill(Piece.Empty)\r\n                .map((_, i) => i % 10 === noGarbageIndex ? Piece.Empty : Piece.Garbage);\r\n\r\n            newBoard.tiles = [...preTiles, ...postTiles];\r\n\r\n            break;\r\n    }\r\n\r\n    if (newBoard.bag.length < 7) {\r\n        newBoard.bag = newBoard.bag.concat(createNewBag(newBoard.srng, newBoard.bagPool, generator));\r\n        newBoard.bagPool++;\r\n    }\r\n\r\n    const lines = [];\r\n    let clears = 0;\r\n\r\n    for (let i = 0; i < 24; i++) {\r\n        const line = newBoard.tiles.slice(i * 10, (i + 1) * 10);\r\n        const cleared = line.every(tile => tile !== Piece.Empty);\r\n            \r\n        if (cleared) {\r\n            clears++;\r\n        } else {\r\n            lines.push(line);\r\n        }\r\n    }\r\n\r\n    const newTiles = new Array(240).fill(Piece.Empty);\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n        newTiles.splice((i + (24 - lines.length)) * 10, 10, ...lines[i]);\r\n    }\r\n\r\n    newBoard.tiles = newTiles;\r\n\r\n    return newBoard;\r\n\r\n}\r\n\r\nfunction mod(n, m) {\r\n    return ((n % m) + m) % m;\r\n}\r\n  "],"names":[],"version":3,"file":"index.f52a8e28.js.map","sourceRoot":"/__parcel_source_root/"}